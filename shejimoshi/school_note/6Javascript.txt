**********************************************************************************************
---------------------------- 2018年12月11日 星期二 晴  -------------------web(day07)------------ 
-Javascript 概述
  1.浏览器解释型语言，嵌套在html文件中，交给浏览器解释和执行 
  2.作用：
    实现用户交互(键盘或者鼠标操作);实现页面动效;网页版小游戏等...
  3.组成：
    1.核心语法(ECMAScript)
    2.BOM: Browser Object Model, 浏览器对象模型，提供一系列与浏览器相关的属性和方法
    3.DOM: Document Object Model, 文档对象模型
    4.自定义对象

-JS的使用
  1.元素绑定事件
    事件：所有用户的行为都称为事件
    事件处理函数：
      对应用户的行为，JS中所做的操作，如
      onclick  单击事件
    语法：
      <标签名 事件名="JS代码">
      如：
        <h1 onclick="alert('Hello!')">点我</h1>
    简单的JS语句：
      alert("Hello!");          以网页以弹框形式提示"Hello!"
      console.log("Hello!");    在控制台输出"Hello!"
    可以一次写多条处理语句，以';'分隔
      <h1 onclick="alert('Hello!');console.log('控制台输出HELLO')">点我</h1>
    示例：
      01_JS.html

  2.在文档中嵌入JS代码，使用<script></script>
    注意：
      脚本标签在文档中可以书写任意多次，出现在任意位置，但是不同的位置有可能影响
      执行结果。
    语法：
      <script>
        JS语句;
      </script>
    
    示例见：
      01_JS.html
  
  3.外部的JS文件
    创建.js文件，在HTML中通过<script src=""></script>引入
    **注意：引入外部js文件时，该script标签内不能再写JS代码
    输出语句：
      prompt("")  带有输入框的弹框，可以接受用户输入
      document.write("")  在页面中写入内容，可以识别HTML标签(即""内可以写HTML标签)
    注意：
      1.document.write()代码的书写位置，决定了内容在body中的添加位置
      2.事件处理时书写的document.write(),会造成页面重写，如(onclick)
    示例见：
      02_output.html
  
  练习：
    1.使用元素绑定事件的方式，为button标签添加单击事件，点击时在控制台
      输出"第一个JS代码"
    2.使用内嵌的方式，在页面中写入一级标题，内容不限
    3.外链方式给提示框
    见03_exercise.html

-JS 基础语法
  1.JS代码是由语句组成的，语句可以由变量，常量，运算符，关键字，函数等组成
  2.JS代码中，语句的结束以分号;为标志,可以省略。
  3.JS代码严格区分大小写
  4.注释：
    单行： //单行注释
    多行:  /* 多行注释 */
  
-JS变量
  1.变量创建
    JS变量使用 var关键字表示
      语法：
        var a;  //定义变量a
        a = 100; //变量赋值
        var a,b,c; //定义多个变量
        可以定义变量时进行赋值：
          var a=100;
          var a=100,b=200,c=300;  // var a=b=c=100;合法吗??经过验证，合法。
    练习：
      定义变量，使用prompt接收用户输入，将结果打印在控制台
      见02_output.html
  
  2.变量的命名规范
    1.可以由数字，字母，下划线，$符号组成，禁止以数字开头
    2.禁止与关键字或保留字冲突
      如(name var const function class if do while for break continue...)
    3.变量以小写字母开头,尽量见名知意，多个单词组成的变量名，采用小驼峰命名
    4.变量名严格区分大小写
  3.输出变量
    var a=10,b=20;
    console.log(a,b,'lalala');
    alert(a);                        //alert只能接收一个参数
    prompt(a);                       //prompt只能接收一个参数
    document.write("<h1>"+a+"</h1>") //document.write只能输出字符串

  4.变量使用注意：
    1.声明变量时，可以省略关键字var，但会影响变量的作用域，谨慎使用
    2.变量使用var声明，但是未赋值，默认值为"undefine" 
    3.如果变量既省略关键字，又未赋值，直接使用会报错
    
    示例：
      04_variable.html

-JS常量
  1.一经声明就无法修改的数据
  2.语法：
    常量使用关键字const声明，必须声明的同时赋值；为了与变量区分，常量
    名采用全大写字母表示
    例：
      const PI = 3.14;
    注：强制修改常量会报错
  3.练习：
    自定义半径变量，定义圆周率(常量),计算圆的周长与面积，控制台输出结果
    见05_circle.html
  4.小数位设置
    toFixed(n);
    保留小数点后n位
    例：
      var a = 62.800000000004,b;
      b = a.toFixed(2);  //产生一个新的数赋值给b，a不变;若想改变a 可以用a = a.toFixed(2);

-JS数据类型
  1.简单数据类型
    1.number 数值类型
      1.整数
        1.十进制表示
          var a = 10;
        2.八进制表示
          八进制数据以0开头,采用0-7八位数字表示
          var a = 010; //8
          控制台一律转成十进制输出
        3.十六进制表示
          十六进制以0x为前缀
          var b = 0x35; //53
      2.小数
        1.小数点计数法  3.14
        2.指数计数法  1.5e3     //1.5 x 10^3
    2.string 字符串类型
      字符串由一个或多个字符组成，使用引号表示，每位字符都有对应的Unicode编码值
      1.语法：
        var s = '100';  //字符串
        var a = 100;    //数值类型
      2.查看字符对应的Unicode的码值
        方法:
          s.charCodeAt(index)  查看字符串s中索引为index的字符的Unicode编码(索引从0开始)
        使用：
          var s1 = "Hello";
          s1.charCodeAt(1);   // 获取'e'对应的码值
      3.已知Unicode码值，转换为字符(中文在计算机中以十六进制存储)
        方法：
          toString(16);    //将数值转换为16进制字符串
          **十六进制字符串转换成unicode字符,需要添加\u转义字符
      
      4.中文范围
        "\u4e00" ~ "\u9fa5"
        十进制19968 ~ 40869
      5.转义字符
        \n : 换行
        \t : 制表符
        \\ : 表示\
        \" : 表示"
        
      示例见：
        06_string.html

    3.boolean 布尔类型
      布尔类型的结果只有真和假 true/false
      var isTrue = true;
      转换成数值true=1,false=0;
      ** 0值为false,非0值均为true
    4.undefine
      1.变量声明但未赋值时，默认为undefined
      2.访问对象不存在的属性，默认也为undefined
    5.null空类型  
  
  2.复杂(引用)数据类型
    如：对象，由属性和方法组成的

  3.检测数据类型
    运算符 ：typeof();
    用法：
      typeof a;
      typeof (code.toString(16));
    示例：
      06_string.html

-数据类型转换
  不同类型的数据进行运算，需要转换类型
  1.自动(隐式)类型转换
    1.字符串与其他类型的数据结合，使用+号连接时，永远表示字符串的拼接，
      转换规则：
        会把非字符串类型的数据自动转换成字符串，后进行拼接，最终结果仍
        为字符串。
      示例：
        var r1 = 10 + 10;         // 20
        var r2 = "10" + 10;       // "1010" 
        var r3 = 5 + 10 + "10";   //--> 15+"10" --> "1510"
        var r4 = "10" + 5 + 10;   //--> "105"+10 --> "10510"
        var r5 = "10" + true;     //"10true"
        var r6 = 10 + true + "10";  //--> 11 + "10" --> "1110"
        var r7 = "10" + undefined;  //"10undefined"
        var r8 = "10" + null;       //"10null"
        **特别注意:
          var a = "10"+true;  //得到"10true"而不是"101"
    2.number + boolean
      转换规则：
        将非number类型的数据转换成number,进行数学相加
      示例：
        var s1 = 10 + true;         //11
        var s2 = 10 + undefined;    //NaN 即 Not a Number(NaN与任意类型进行数值运算，都会返回NaN)
        var s3 = 10 + null;        //10,null为空值，相当于只有10自己一个操作数，所以结果还是10
    3.boolean + boolean
      转换规则：
        将boolean转换成number,进行数学相加
      示例：
        var s4 = true + true;      //2
    
    见07_transform.html  

  2.强制类型转换
    1.转换为字符串类型
      方法：toString()
        将任意类型的数据转换成字符串类型
      例：
        var a = 100;
        a = a.toString();
    2.转换为number类型
      1.Number(param)
        将任意类型的数据转换成number类型
        参数：
          需要类型转换的数据
        返回：
          返回转换结果，成功则返回number值，失败返回NaN
        例：
          var s1 = Number("35.5");
          var s1 = Number(true);    //1
          var s3 = Number("18a");  //NaN
          var s4 = Number("1.56e3");  //1560

      2.parseInt(param)
        解析字符串中的number数据(可以用来取整)
          过程：
            1.如果参数非字符串，自动转换成字符串类型
            2.从左至右，对每一位字符进行转number操作，遇到转换失败则停止向后解析，直接返回结果
          示例：
            var s1 = parseInt(35.5);    //35,转换时遇到.则转换失败，返回35
            var s1 = parseInt("18.5a"); //18,同上
            var s1 = parseInt("a18");   //NaN,第一位就转换失败
            var s1 = parseInt("1.56e3");  //1

      2.parseFloat(param)
        解析字符串中的number数据，包含小数部分
        示例：
          var s1 = parseFloat(35.5);        //35.5
          var s1 = parseFloat("18.5a");     //18.5
          var s1 = parseFloat("a18");       //NaN,第一位就转换失败
          var s1 = parseFloat("9.5.3a");  //9.5, 解析到第二个'.'时判定转换失败
          var s1 = parseFloat("1.56e3");  //1560

-运算符：
  1.赋值运算符 =
  2.算术运算符
    +  -  *  /  %(求余)
    1.所有字符串参与的+运算，全都是字符串拼接
      例：
        var s1 = "10" + true;
    2.非字符串类型参与算术运算，统一转换成number(自动转换),后进行计算
      字符串类型在进行除了'+'以外的其他运算时，也先转换成number再进行计算
    示例：
      var s1 = 10 + true;
      var s2 = "10" / 5;  //2
      var s3 = "10a" / 5; //NaN
      var s4 = "10" - true; //9
    3.自增/自减运算符  ++ --
      var a = 10;
      a++;
      a--;
      使用：
        1.单独与变量结合，做前缀或做后缀没有区别  a++ 等同于 ++a
        2.与其他运算符结合时,做后缀则先结合其他运算符再自增，
            如(r = a++)，做后缀则先赋值，再自增
          做前缀则先自增再结合其他运算符
            如(r = ++a),先自增，再赋值；
        3.自增自减运算符可以识别字符串的数值  如: var a = '1';  a++;  --> 2
        示例：
          var r3 = b++ + 100;  //先结合其他运算符再自增  r3=110
          console.log(r3,b);   //b=11
        思考题：
          var n=5;
          var r = n++ + ++n + n++ + ++n +n;
          解：
            表达式1： r1 = n++;  //r1=5,n=6
            表达式1： r2 = ++n;  //r1=7,n=7
            表达式1： r3 = n++;  //r1=7,n=8
            表达式1： r4 = ++n;  //r1=9,n=9
            表达式1： r5 = n;    //r1=9,n=9
            r = 5 + 7 + 7 + 9 + 9
      注意：常量不能修改，所以自增/自减运算符只能用于变量
        5++;  //error
        const a=5;
        a++;  //error
  3.复合运算符
    -=  +=  *=  /=        
  见：
    08_operator.html

**********************************************************************************************
---------------------------- 2018年12月12日 星期三 晴  -------------------web(day08)------------
  4.比较运算符(关系运算符)
      >  >=  <  <=  ==  !=  ===(恒等)  !==(不恒等)
    1.作用和返回值：
      用来判断表达式之间的关系，结果为布尔类型
    2.分类
      1.number与其他类型之间的比较
        过程：将非number数据转换成number，再进行比较
        注意：NaN与任意类型比较，结果都为false
        示例：
          var r1 = 10 > 5;
          var r2 = "10" > 5;  //true, "10"会自动转换成number类型10
          var r3 = 5 < true;  //false, true会自动转换为number类型1
          var r4 = "5a" > 1;  //false, "5a"转number得到NaN,NaN>1不成立,结果为false
      2.字符串之间的比较
        1.字符串之间进行比较，不会再进行数据转换
        2.从前往后，依次比较每个字符的unicode码，得到结果则立即返回
          var r5 = "2" > "10";  //true, '2'的编码值比'1'的编码值大
          var r6 = 'c' > 'bac';
          var r7 = 'a' > 'aa';  //false, 第一位字符相同，继续往后比较，但左边的字符串已无值,所以NaN > 'a' 为false
      3.字符串与boolean类型的比较
        例：
          '10' > true;   //ture ,会转成number类型比较
          '10a' > true;  //false,会转成number类型比较
    
    3.相等与恒等
      1.相等，包含自动类型转换，只要值相等就成立
        例：
          "10" == 10;  //true
          "10" != 10;  //false, 自动转换类型后,10 != 10 则为false
      2.全等：
          不会进行自动类型转换，要求类型一致且值相等才视为成立
          "10" == 10;  //类型不一致，直接返回false
          "10" != 10;  //true, "10"和10不恒等

    示例：
      见01_operator.html
  
  5.逻辑运算符
    1.作用：
      将多个表达式的结果组合成最终单一的布尔值
    2.分类：
      1.&& : 逻辑与
          遇0则0,全1则1
      2.|| : 逻辑或
          遇1则1,全0则0
      3.! : 逻辑非
        对布尔结果取反操作
        !0则1，!1则0
        示例：
          !(5 > 3); //!true --> false
          !5;       //false
    练习：
      1.接收输入的年份，检测数据类型；
        判断该年份是否是闰年，在控制台输出结果
        1.能被400整除
        2.能被4整除，但是不能被100整除
      2.接收用户输入一个字符，判断输入的内容
        是数字吗?
        是字母吗?
        是中文吗?
    见02_exercise.html

  6.位运算
    1.数据在计算机中是以二进制存储的，位运算是指直接对二进制位操作
    2.分类：
      1.位与 &
        任何整数与1做位与可以判断奇偶性，位与结果为1则为奇数，位与结果为0则为偶数
      2.位或 |
      3.位异或 ^
        位异或可以不借助第三方变量实现两个数据的交换
        见03_operator.html
  7.三目运算符(三元)
    条件表达式
    语法：
      条件1 ? 表达式1 : 表达式2;
    过程：
      判断条件1是否成立，成立则执行表达式1，不成立执行表达式2，返回结果
    练习：
      1.成绩判定
        接收用户输入的成绩
        >=90  A
        80~90 B
        60~80 C
        <60   D
        判断等级并输出
      2.身体指数BMI
        bmi = 体重(kg) / (身高(m) * 身高(m));
        保留两位小数，判断身体情况：
          bmi > 23.9           该减肥了
          18.5 <= bmi <= 23.9  健康
          bmi < 18.5           多吃点
      见04_exercise.html

-流程控制
  1.控制代码的执行顺序
  2.分类：
    1.顺序结构
      自上而下，依次执行所有的代码语句
    2.分支(选择结构)
      根据条件是否成立，选择执行某段代码
      1.if语句
        if(条件){

        }
        注：
          1.{}可以省略，省略之后if条件满足时，只执行后面紧跟的1条语句
          示例：
            05_if.html
          条件为假的情况：
            if(0)
            if("")
            if(NaN)
            if(undefined)
            if(null)
            **I注意：
              if(" ")为真," "该字符串是包含空格的非空字符，只有空字符才会判定为假
          2.if-else语句
            语法：
              if(条件){
                //成立时执行
              }
              else{
                //不成立时执行
              }
          3.多重分支
            语法：
              if(){

              }
              else if(){

              }
              ...
              else{

              }
          练习：
            1.使用if判断成绩等级
            2.日期计算器，接收用户输入的年，月，日，判断当日是该年的第几天
            见：06_date.html
      2.switch语句
        switch(变量){
        case 值1: {
          //变量===值1时执行
          break;
          }
        case 值2:{
          //变量===值2时执行
          break;
          }
          ...
        default:{
          //如果以上情况都没有匹配到，默认执行的操作，default语句段可以省略
          }
        }
        注意：
          1.switch进行值的全等匹配，要求类型与值都一致，才能匹配成功
        **2.如果被匹配到的语句块中省略break,会向下直接执行其他case的语句块，不进行匹配判断，直到遇见break或走到结尾
            利用以上特性可以实现case代码段的共用：
              switch(a){
                  case '1':
                  case '3':
                  case '5':{
                    alert("红烧肉");
                    break;
                  } 
                  case '2':
                  case '4':
                  case '6':{
                    alert("红烧鱼");
                    break;
                  }
        }
        示例:
          见07_switch.html
      3.循环语句
        1.重复执行某一段代码
        2.循环三要素：
          循环变量
          循环执行的条件
          循环体
        3.分类：
          1.while 循环
            语法:
              循环变量;
              while(循环条件)
                {
                  循环体
                }
            例：
              var i = 1;
              while(i<=3)
                {
                console.log("6");
                i++;
                }
            练习：
              1.控制台输出1-100之间所有的整数
              2.求1-100之间所有整数的和
              3.控制台输出1-100之间所有3的倍数
              见：08_while.html
              4.改版日期计算器
              见：09_while_datecount.html
          2.do-while 循环
            语法:
              循环变量
              do
                {
                循环体
                }
              while(循环条件);
            执行流程：
              1.定义循环变量
              2.执行循环体
              3.判断循环条件，条件成立，重复2>3;条件不成立，结束循环
            练习：
              循环接收用户输入并在控制台输出，直到用户输入"exit",结束循环
              见10_do_while.html
          3.for循环
            语法：
              for(循环变量;循环条件;更新变量)
                {
                循环体
                }
            示例：
              for(var i = 1; i < 101; i++)
                {
                  console.log(i);
                }
            循环控制:
              1. break : 用于结束循环
              2. continue : 忽略后面代码，执行"更新变量"语句，从新判断条件开始下一次循环
            循环嵌套：
              在循环体中嵌套使用其他循环体
            练习：
              1.判断素数(见11_sushu.html)
                接收用户输入的1个数字，判断是否是素数
              2.接收用户输入的年月日，判断是星期几(见12_weekday.html)
                已知：
                  1990年1月1日是星期一
              3.控制台输出图案(见13_console.html)
                1.
                *
                **
                ***
                ****
                *****
                2.
                    *
                   ***
                  *****
                 *******
                *********
              4.九九乘法表(见14_multi.html)

**********************************************************************************************
---------------------------- 2018年12月13日 星期四 晴  -------------------web(day09)------------
-函数
  1.作用：
    保存一段待执行的代码
  2.语法：
    1.函数声明
      封装代码段
      function 函数名(形参列表)
      {
        函数体
        return 返回值;
      }

    2.函数调用
      执行代码段
      函数名(实参列表)
    示例：
      01_function.html
    3.注意：
      1.函数名尽量见名知意，普通函数使用小写字母开头
      2.参数的小括号不能省略，多个参数之间使用逗号隔开
      3.return关键字用于将函数内部的结果返回给外界使用，只能返回一个值(表达式)
      4.return之后的代码都不执行
    4.其他声明和使用方式:
      1.使用变量保存匿名函数
        var fun = function (){}
        注：fun变量名即函数名，调用： fun()
      2.匿名函数自执行
        (function (形参){})(实参);
    5.变量的作用域
      1.全局作用域
        在函数外部定义的变量都是全局作用域中的变量，在任何地方都可以访问
      2.函数作用域
        在函数内部使用var关键字定义的变量都的局部变量，只在当前函数体中
        可以访问，外界无法使用(所有省略var关键字创建的变量都会认为是全局变量)
      3.作用域链
        函数作用域中访问变量，首先从自身作用域中查找，查找失败则向外层作用域查找
        直至全局作用域
【特别注意】:
  JS中，实参与形参数量可以不一样
  如：
    function fun1(a){
      //
    }
    fun1(10,20);
    **以上fun1函数中a=10
  又如：
    function fun2(a,b){
      //
    }
    fun2(10);
    **以上fun2函数中a=10,b在fun2中为"已定义未赋值",即undefined


    练习：
      1.日期计算改用函数封装(见02_exercise.html)
        整体功能通过函数封装，按钮点击调用
        闰年判断封装函数

-内置对象
  1.对象由静态属性和动态方法组成
  2.数组 Array
    1.按照顺序存储一组数据
    2.创建数组
      1.字面值方式
        使用[]表示数组结构，数据使用逗号隔开
          例：
            var arr1 = [1, 2, 3, 4, 5, 6];
      2.使用new关键字，根据类型Array创建具体的对象
        例:
          var arr2 = new Array(10,20,30);
        注意：
          使用new关键字创建数组时，如果只传递一个整数作为参数，表示初始化
          数组长度
          如：
            var arr1 = [5];           --> [5]
            var arr2 = new Array(5);  --> 长度为5的空数组
      3.操作数组元素
        1.数组会自动为元素分配下标，默认从0开始
        2.通过元素下标实现对数组元素的操作
          语法：
            arr[index] = 10;
            var a = arr[index];
            * 可读可写
            * 可动态修改长度，如arr1长度只有5,当使用arr1[9] = 10;时，arr1长度会变为10,中间填充empty;
      示例：
        03_array.html
      4.遍历数组元素
        属性：length 表示数组长度(元素个数)，通过点语法访问
          **可以采用length表示当前数组末尾的后一个元素下标，如要在arr后添加元素：
            arr[arr.lenth] = 10;
        语法：
          for(var i = 0; i < arr.lenth; i++)
          {
            console.log(arr[i]);
          }
          //倒序遍历
          for(var i = lenth-1; i >= 0; i--)
          {
            console.log(arr[i]);
          }
          //用for ... in ...遍历数组
          for(var i in arr2)
          {
            //遍历出来的i是arr2的下标，不是值(如果arr2是字典类型，遍历出来i是key)
          }
        练习：
          1.循环接收用户输入，将数据存储在数组中，直至用户输入'exit'
            表示结束输入，控制台打印数组元素。(见04_input.html)
          2.声明包含若干数据是数组，求这一组数据中的最大值(见05_max.html)
          3.创建一个包含三个number数据的数组，按照从小到大的顺序排序(见06_sorted.html)
          4.声明数组包含若干元素,接收用户输入，查询用户输入的数据是否在数组中，返回对应
            的下标，如果不存在，返回-1
      5.属性与方法
        1.数组属性 length
            表示数组长度
        2.数组方法 
          1.toString()
            作用:  将数组转换成字符串
            返回值:字符串
            示例：
              var arr1 = [1, 2, 3, '6'];
              var r1 = arr1.toString();  //r1 >>> "1,2,3,6"
          2.join(param)
            作用：将数组中的元素按照param指定的符号连接，返回字符串
            参数：可选，用于指定元素之间的连接符，可以使用单个字符，也可以使用字符串，默认为逗号
          
          3.reverse()
            作用：反转数组，倒序重排(会直接改变原数组)
            返回值：返回数组，反转操作会改变原数组结构，所以该返回值可以不接收
          4.sort()
            作用：将数组中的元素按照Unicode码值升序排列  ??如果数据有多个字符，如何排(答:遵从字符串的比较方法来排)
            返回：数组(会改变原始数组的存储顺序)
            参数：可选，自定义排序方法(默认根据Unicode比较来升序排序)
            示例：
              // 自定义sort()排序算法，对number值按照数值的大小升序排列
              ** 根据自定义函数的返回值比较，如果>0则交换元素位置，否则不变
              function sortASC(a,b)
              {
                  return a-b;
              }
              arr2.sort(sortASC);
              console.log(arr2);
            例2：
              与以上示例相似,如果函数返回值写成b-a，则变成降序排列
          5.push(data)
            作用：在数组末尾添加一个或若干个元素，多个元素之间用逗号隔开
            返回：新数组的长度
          6.pop()
            作用：删除数组中末尾元素
            返回：被删除的元素
          7.unshift(data)
            作用：在数组头部添加一个或多个元素(用逗号分隔)
            返回：修改之后数组的长度
          8.shift()
            作用：删除数组中的第一个元素
            返回：被删除元素
          9.forEach(function)
            作用：遍历数组元素
            参数：通过函数，获取数组中元素，执行相关操作
            示例：
              // 每取出一个元素，就将元素和其对应的下标作为参数自动执行function
              arr2.forEach(function (elem[,index]){
                  console.log(elem,index)
              });
              **forEach的参数可以是匿名函数，也可以是外部定义的函数
                (该函数定义时可以有一个或两个形参，
                 只有一个形参时，forEach会将取得的元素本身作为实参传入；
                 当有两个形参时，forEach会将元素和对应的下标作为实参传入)
          
        示例：
          07_Array_API.html
    
      6.二维数组
        1.数组中的每一个元素又是数组结构
        2.语法：
          var arr = [[1,2], [3,4], [5,6,7]];
        3.读取元素
           arr[1][0];  --> 3
练习：(08_dec_to_bin.html)
  通过代码实现十进制转二进制，输出最终的二进制字符串
    要求十进制可以由用户输入(整数)

**********************************************************************************************
---------------------------- 2018年12月14日 星期五 晴  -------------------web(day10)------------
-字符串 String
  1.创建语法
    var s1 = "100";
    var s2 = new String("hello");
    var s3 = String("hi");
    注：内置的对象类型，创建时可以省略new关键字

  2.属性
    length   字符串长度(字符个数)
    注：字符串采用类数组结构存储每一个字符，自动为每位字符分配下标，默认从0开始
    //字符串也可以遍历
    for(var i = 0; i < str1.length; i++)
    {
        console.log(str1[i]);
    }
  3.方法
    1.英文转换大小写
      1.toUpperCase()
        将字符串中的字母转换大写
      2.toLowerCase()
        将字符串中的字母转换小写
      返回：转换后的字符串，不会改变原始字符串
      例：
        str.toUpperCase()
        str.toLowerCase()
    2.获取字符
      1.charAt(index)
        获取指定下标的字符
      2.charCodeAt(index)
        获取指定下标的字符Unicode编码
      用法：
        str.charAt(index)
        str.charCodeAt(index)
    3.检索字符(获取指定字符的下标)
      1.indexOf(value,fromIndex)
        作用：获取指定字符的下标
        返回：value在字符串第一次出现时的下标，查找失败返回-1
        参数：
            value 可以填单个字符，也可以填字符串
            fromIndex选填，默认为0，表示从哪一个下标开始向后查找(包含)
        示例：
          str.indexOf('a',6)
      2.lastIndexOf(value,fromIndex)
        作用：反向遍历，获取指定字符(串),第一次出现的下标位置
        参数：
          1.value:    指定字符或字符串
          2.fromIndex:指定起始下标，选填
        **注意：lastIndexOf从后往前查找，找到即返回
          当给出fromIndex起始位置时，从该位置(包含)起向前查找
        用法：
          str.lastIndexOf('a',6)          
    4.截取字符串(切片)
      substring(starIndex,endIndex);
      作用：根据指定的下标范围，截取字符串并返回
      参数：指定截取范围[starIndex,endIndex),endIndex可以省略，表示截取至末尾
      示例：
        str.substring(3,6)
    5.分割字符串
      split(separator);
      作用：根据指定的分割符，分割字符串
      返回：数组，存放分割后的每个字符串(不保留用于分割的字符)
      参数：指定分割符，如果目标字符串中不包含指定的字符,字符串不会被分割，返回包含原字符串的数组
      示例：
        str.split('*')
    6.模式匹配
      1.作用：
        结合正则表达式实现指定字符串的查找和替换
      2.正则表达式：
        1.语法：
          /正则格式/修饰符
          修饰符:
            i : ignorecase 忽略大小写
            g : global     全局匹配 
          例：
            var reg1 = /微软/;  //找到一个"微软"就立即返回，可以用g修饰符查找全部
            var reg2 = /\w{2,6}/
      3.字符串方法
        1.match(pattern)
          作用：查找字符串中满足正则格式的内容
          参数：正则格式字符串
          返回：数组，存放查找到的所有字符串
          示例：
            var str = "上知乎，搜知乎，问知乎，答知乎";
            var arr1 = str.match(/知乎/g);
          **注意：
            正则格式字符串不要加引号
        2.replace(pattern,newStr)
          作用：
            根据指定正则格式查找字符串中相应内容，并替换为newStr
          返回：
            替换后的字符串,不改变原始数据
             
  示例：
  01_string.html

  练习1：(见02_verification.html)
    模拟验证码：
    1.创建数组，存放数字，字母，作为数据源
    2.生成随机验证码(4位)
      随机数:Math.random()  //左闭右开[0,1)
      扩大范围，取整，获得随机下标
      取整:parseInt(5/2)　　// 2
    3.通过弹框提示用户输入，不区分大小写
    4.判断是否验证通过
    ---------------------------------------
    5.用户点击"获取验证码",提示用户输入
    6.验证功能封装成函数
    7.生成验证码的过程也封装成函数，可以接收参数，生成指定位数的验证码
  练习2：(见03_slice.html)
    1.自定义邮箱字符串
      用户名@服务商
      要求：从邮箱字符串中提取出用户名和服务商
    2.指定身份证号码，提取出生年月日
      从第7位开始的8位数字信息
  练习3：(见04_split.html)
    "?101_5&201_10&301_20"
    商品id_商品数量
    101   5
    提取商品id和数量，进行输出
    "商品id为...数量为..."

-正则表达式对象 RegExp
  1.RegExp : Regular Expression
    制定字符串的组成模式
  2.创建:
    1. var reg1 = /格式/修饰符;
    2. var reg2 = new RegExp("格式",'修饰符');
      ** 第2种方式以字符串方式传入，要留意转义字符，如:var reg2 = new RegExp("\\d{6}", "ig")
  3.属性和方法
    1.属性:
      lastIndex : 可读可写，表示下一次匹配的起始下标
        ** 正则对象每用一次，会记录匹配到的位置，下次再使用该正则对象匹配会继续往后匹配
          直到字符串末尾，才会自动归零。除非自己手动归零
        示例：
          var str1 = "1234567890123456";
          var str2 = "abc34567890";
          reg = /\d{6}/
          var res1 = str2.match(reg);
          var res2 = str1.match(reg);
    2.方法：
      test(param)
      作用：
        验证字符串中是否存在满足正则格式的内容，返回布尔值
      参数：
        要验证的字符串
      示例：
        var judge = reg2.test(str2);

-Math 对象       
  1.Math对象提供一系列数学方法
  2.属性
    数学常量
      Math.PI  表示圆周率3.14或者弧度制180度 
      Math.E   自然对数
  3.方法
    1.三角函数
      Math.sin(x) 求正弦，参数为弧度制角度值
      Math.cos(x) 求余弦，参数为弧度制角度值
      Math.tan(x) 求正切，参数为弧度制角度值
    2.计算函数
      Math.sqrt(x)    求平方根 squar root
      Math.pow(x,y)   求x的y次方
      Math.log(x)     求对数
    3.数值函数
      Math.abs(x)       求绝对值
      Math.max(a,b,c..) 求一组数据的最大值
      Math.min(a,b,c..) 求一组数据的最小值
      Math.random()     生成[0,1)之间的随机实数
      Math.ceil(x)      对x向上取整
      Math.floor(x)     对x向下取整(可用于地板除Math.floor(5/2))
      Math.round(x)     四舍五入取整
  示例见：
    07_math.html

-Date 日期对象
  1.操作日期与时间
  2.创建
    1.获取当前的系统时间time
      var date1 = new Date();
    2.创建指定日期时间的对象
      var date2 = new Date("2012-12-12 10:10:10")
      var date3 = new Date("2012/12/12 10:10:10")
  3.方法
    1.getTime()
      读取当前日期对象距离1970-01-01 00:00:00之间间隔的毫秒数
    2.提取时间分量
      1.getFullYear()
        获取当前日期对象的年份
      2.getMonth()
        获取当前日期对象的月份
        **返回的是0-11，需要进行+1处理获得常规意义上的月份
      3.getDate()
        获取当前日期对象的 日
      4.getDay()
        获取当前日期对象的 星期信息
        **返回0-6的数字，0代表星期天
      5.getHours()
        获取小时数
      6.getMinutes()
        获取分钟
      7.getSeconds()
        获取秒数
      8.getMilliseconds()
        获取毫秒数
    3.转换日期格式
      1.toLocaleString()    # 2018/12/21 上午9:26:06
        以本地格式显示日期和时间
      2.toLocaleDateString()  # 2018/12/21
        以本地格式显示日期
      3.toLocaleTimeString()  # 上午9:26:06
        以本地格式显示时间
  示例：
    08_date.html

-外置对象
  1.BOM: Browser Object Model
    浏览器对象模型，
    提供一系列与浏览器相关的属性和方法
    1.核心对象是window
      window 由浏览器打开页面时自动创建，可以直接访问
    2.window 常见的属性和方法
      1.属性
        history  screen  location  document  navigator
        以上都是对象属性，包含自身的属性和方法
      2.方法
        alert();
        prompt();
        定时器方法
        confirm()确认框
          参数为提示文本，自带确认和取消按钮，只有点击
          确认时，返回true，取消则返回false
          window.confirm("请确认");
      3.使用
        可以省略window对象，直接访问相关的属性和方法
        window.alert();         等同于 alert();
        window.document.write() 等同于 document.write();
    示例：
      09_window.html
    练习：(见10_window_exercise.html)
      使用确认框，询问用户是否关闭当前窗口
      如果点击确定，则关闭窗口
      调用window.close();方法
    3.定时器方法
      1.周期性定时器(间歇调用)
        1.根据指定的时间间隔，不断调用相关代码
        2.语法：
          1.开启
            setInterval(func,interval)
              参数：
                1.func : 需要执行的函数
                2.interval : 时间间隔，以ms为单位
              返回：定时器ID
          2.关闭
            clearInterval(定时器ID)
        示例：
          11_setIntervar.html

      2.一次性定时器
        1.在指定的时间间隔之后，执行一次代码
        2.语法：
          1.开启
            setTimeout(func, interval)
            参数：
              1.func :     需要执行的函数
              2.interval : 时间间隔(ms)
            返回: 定时器ID
          2.clearTimeout(定时器ID)
        示例：
          12_setTimeout.html
    **注意：
      定时器不会阻塞程序的执行
    练习：(13_exercise.html)
      1.创建按钮(开始、结束)，要求点击开始时，在控制台每隔1s输出一次系统时间
        点击结束，停止输出
      2.弹窗询问是否关闭窗口，如果点击确定，3秒后关闭页面
    ---day11---
    4.属性
      1.大部分window对象的属性又是对象类型，包含了自身的属性和方法
        例：
          document  screen  location  history...
      2.screen 屏幕对象
        保存与屏幕相关的信息
        属性：
          width/height : 屏幕的宽高
          availWidth/availHeight : 实际可用的屏幕宽高(减去系统任务栏之后的尺寸)
        示例：
          01_screen.html
      3.history
        保存当前窗口访问过的url信息
        属性：
          length : 当前窗口访问过的URL数量
        方法：
          back()    : 相当于浏览器的后退按钮
          forward() : 相当于前进按钮
          go(num)   : 参数num可正可负，正值代表前进num条url,负值代表后退
          **注意：
            1.方法使用示，都是从当前页面在history中的位置开始，前进或者后退
            2.窗口的历史记录数量，跟随URL变化自动添加，访问顺序决定历史记录的顺序
              重复切换页面，不会影响历史记录的顺序和数量
        示例：
          02_history.html
      4.location
        操作当前窗口地址栏的信息
        属性：
          href : 用来获取或设置当前窗口地址栏URL的信息，如果赋值，页面重定向
            发生内容跳转
        方法：
          reload(param)
          重载页面，相当于刷新
          参数：true/false
               默认为false,从缓存中重载页面
               true则为从服务器根目录重新请求页面
        示例：
          03_location.html
           


  2.DOM: Document Object Model
    文档对象模型

**********************************************************************************************
---------------------------- 2018年12月21日 星期五 晴  -------------------web(day11)------------  
**补12月17日星期一的课
  2.DOM - Document Object Model
    1.文档对象模型，主要围绕documen对象，实现对网页文档内容的操作
    2.在JS中,认为html文件本身就是一篇文档，文档的层次结构，在JS中
      表现为节点树
        节点：
          网页在解析过程中，其中的标签，标签属性，文本内容都会被
          封装成一个节点
        节点：
          1.元素节点  ->  标签名
          2.属性节点  ->  标签属性
          3.文本节点  ->  文本内容
          -----------------------
          4.文档节点  ->  document
          5.注释节点  ->  网页中的注释
        节点操作：
          1.获取节点
          2.读取和修改节点内容
          3.创建节点
          4.添加节点
          5.删除节点
    3.获取元素节点
      1.document.getElementsByTagName("标签名");
        如:document.getElementsByTagName("div");
        作用：
          通过标签名获取元素节点
        返回值：
          节点列表(类数组)
        参数：
          标签名字符串
        **直接对innerHTML或innerTEXT赋值可以改变标签内容
        **innerHTML可以识别标签语法,innerTEXT只能识别纯文本，如
            h1.innerHTML = "<a href=''>男神魏</a>";  #可以解析成a标签
            h1_2.innerText = "<a href=''>男神魏</a>"; #认为里面只是纯字符串
      2.document.getElementsByClassName("类名");
        作用：
          根据class属性值获取元素节点
        返回：节点列表
        参数：字符串的class属性值
        **类名可以传多个，表示获取同时属于多类的标签
          如：获取类名包含c1 且 包含c2 的元素节点
      3.document.getElementById("ID");
        作用：根据id属性值获取具体的元素节点
        返回：节点对象
      4.document.getElementsByName("name");
        作用：根据name属性值获取节点数组
      练习：(见05_exercise.html)
        创建文本框和按钮，
        点击按钮时，获取文本框输入的内容，以一级标题的形式显示在
        div中
      元素节点常用属性：
        1.innerHTML
          读取或设置元素节点的标签内容，可以识别HTML标签语法
        2.innerText
          读取或设置元素节点的文本内容，不能识别标签语法
        3.value
          针对表单控件，表示表单元素的值
      示例：
        04_getElements.html
    4.操作标签属性
      1.getAttribute('attrName');
        根据标签节点的属性名，获取对应的属性值
      2.setAttribute('attrName','attrValue');
        为元素节点添加标签属性
      3.removeAttribute('attrName');
        移除指定属性
      4.点语法操作标签属性
        **标签属性也是元素节点对象的属性，因此可以直接用点语法方法
        示例：
          h1_obj.id = 'd1';
          h1_obj.className = 'c1';
          //移除属性值
          h1_obj.id = null;
      练习：(见07_operAttr.html)
        创建超链接，初始链接地址为百度
        创建按钮，点击时修改超链接的连接地址，改为"http://www.tmooc.cn"
      示例：
        06_attribute.html
    5.操作元素节点的样式
      1.为元素添加id/class属性，使之对应选择器样式
        例:
          h1.setAttribute('class','c1');
          h1.className = 'c1';
      2.操作行内样式
        例：
          <h1 style = "color:red;">
          通过元素访问style属性，返回样式对象
            style_obj = h1.style;
            样式对象中包含全部的css属性，可以通过点语法直接操作
          注：
            通过样式对象点语法访问CSS属性，对于带有连接符的属性
            一律更名为驼峰标识
              h1.style.fontSize = "20px";
            采用字符串为CSS属性赋值
              p.style.width = '500px';
              p.style.height = '200px';
              p.style.fontSize = '20px';
              p.style.textAlign = 'center';
              p.style.color = 'red';
              p.style.backgroundColor = 'green';
              p.style.lineHeight = '200px';
              p.style.margin = '0px auto';
        示例见：
          08_style.html
        练习：(见09_exercise.html)
          创建 div 文本框 按钮
          要求用户名必须在6-18位之间，点击按钮时，获取输入内容，
          进行验证，验证通过则设置div显示文本"用户名合法"
          若用户名不合法，设置div以红色文本色显示"用户名不合法"

**********************************************************************************************
---------------------------- 2018年12月22日 星期六 晴  -------------------web(day12)------------   
**补12月18日星期二的课    
-读取节点信息
  1.节点类型
    属性:node type
    返回:
      1. 元素节点
      2. 属性节点
      3. 文本节点
      8. 注释节点
      9. 文档节点
  2.节点名称
    属性：nodeName
    返回：
      元素节点 -> 标签名
      属性节点 -> 属性名
      文本节点 -> #text
      注释节点 -> #comment
      文档节点 -> #document
    
-元素节点的层次属性
  1.parentNode    
    获取父节点
  2.childNodes
    获取当前节点的所有子节点，返回子节点的数组(包含全部子节点)
  3.children
    获取当前节点的所有元素子节点，返回子节点数组(只包直接子元素)
  4.nextSibling
    获取下一个兄弟节点
    nextElementSibling : 获取下一个元素兄弟节点
  5.previousSibling
    获取前一个兄弟节点
    previousElementSibling:获取前一个元素兄弟节点
  6.attributes
    获取当前元素节点中所有的属性节点，返回节点数组
  示例见：
    01_parentNode.html

-节点的创建，添加与删除
  1.创建节点
    1.创建元素节点
      var div = document.createElement('div');
      返回: 创建的元素节点
    2.创建文本节点
      var text = document.createTextNode('文本内容');
      返回: 创建的文本节点
    3.属性节点操作
      标签属性可以通过元素节点直接访问
      div.id = 'd1';
    练习：(见02_operNode.html)
      动态创建div,设置id为box;文本内容为"动态创建的div"
      控制台输出元素节点
  2.添加节点(添加到页面)
    节点的添加和删除必须由父元素操作
    1.添加在父元素的末尾
      语法：
        parentNode.appendChild(childNode);
        或:
        parentNode.append(childNode);
        如：
          var body = document.getElementsByTagName("body")[0];
          body.appendChild(div);
          **body是文档中唯一存在的元素节点，作为document的属性存在
          以上语句可以简写为：
          document.body.appendChild(div);
      注意：
        文本节点也是元素节点的子节点
    2.在指定位置插入节点
      语法：
        parentNode.insertBefore(newNode,existNode);
          在已有节点existNode之前添加newNode
      注意：
        节点对象不能复用(重复添加),页面中想出现几个节点,JS中需要创建
        对应数量的节点，一一对应。  
  3.删除节点
    语法:
      parentNode.removeChild(node);
        从父元素移除指定节点对象    
    示例见：
      见02_operNode.html
  练习：(见03_createNode.html)
    1.静态页面：
      1.顶部  三个输入框，一个按钮
      2.主体 表格，第一行表头信息
    2.动态添加
      根据用户输入，创建行和单元格，添加到页面中显示
      注意：表格的行分组<tbody>
        
-事件处理
  1.事件 : 用户行为
  2.事件处理函数:
    1.系统提供的，在用户行为触发后，浏览器自动调用的函数
    2.分类：
      1.鼠标事件
        onclick      单击事件
        ondblclick   双击事件
        onmouseover  鼠标移入
        onmousemove  鼠标移动
        onmouseout   鼠标移出
      2.onload
        文档或元素加载完毕后触发/执行
        见06_onload.html
      3.表单控件状态改变
        onfocus      文本框获取到焦点时触发
        onblur       文本框失去焦点时触发
        oninput      实时监听文本框的输入
        onchange     监听输入框前后输入内容是否发生改变，也可以监听选择框的选中状态改变
                     要求输入框失去焦点，且前后内容不一致才触发
        onsubmit     表单元素监听,点击提交按钮时自动触发
      4.键盘事件
        onkeydown    按键被按下
        onkeypress   按键被按下
        onkeyup      按键抬起
    3.元素绑定事件的方式
      1.内联：
        通过标签属性的方式，将事件处理函数绑定到具体的元素上
      2.动态绑定事件
        语法：
          h1.onclick = function(){};
      示例：
      04_event.html

      3.W3C标准事件监听
        语法：
          h1.addEventListener('click', function[, bool]);
        参数:
          1.省略'on'前缀的事件函数名
          2.事件触发后要执行的操作
          3.可省略，默认为false,表示事件传递顺序，false表示从
            里向外传递
          **事件传递机制：
            (当事件发生在后代元素上时，变相地其实也发生在其祖先元素
            上，如body包含h1，当点击h1时，实际上也点击了body,当两者
            都要触发点击事件函数时，就有了触发顺序的冲突，所以需要
            事件传递机制来协调)
            事件传递机制表示事件的传递顺序
            分类：
              事件冒泡:从里向外逐级传递事件，默认
              事件捕获:从外向里逐级传递，IE浏览器不支持
        示例见：
        05_bubble.html
        cookie:
          // this指代当前函数或者方法的调用者
          uname.oninput = function(){  
              console.log(this.value);  //这里的this即代表uname
          };
    4.事件行为
      1.window.onload = function (){};
        等待窗口加载完毕后自动执行函数
      2.form.onsubmit() = function (){};
        点击提交按钮时自动触发，执行处理函数，函数中允许对表单
        数据做提交前的最后一步验证，通过返回值true/false控制数据
        是否可以提交给服务器
          true : 允许发送
          false : 不允许发送
        示例：
          form.onsubmit = function(){
              // 点击提交按钮时自动触发
              if(uname.value.length == 0){
                  return false; //return false该表单不会提交
              }
              else{
                  return true; //return true 该表单正常提交
              };
          };
      3.this关键字:
        默认情况下,指代函数或方法的调用者
          例：
            function f1(){
              console.log(this);
            }
            f1();
  3.事件对象
    1.事件对象:伴随事件产生，浏览器自动封装的对象，包含了所有与
      当前事件相关的信息
    2.获取：
      事件对象会以参数的形式由浏览器自动传入事件处理函数中,我们
      需要定义形参来接收该事件
      例：
        div.onclick = function (evt){};
    3.常用属性
      不同的事件类型，事件对象中包含的信息也不同
      1.所有事件共有的属性
        srcElement/target
          获取当前事件的触发对象(事件源)
      2.鼠标事件对象特有属性
        1.offsetX offsetY
          获取鼠标在元素坐标系中的位置信息，以元素左上角为原点
        2.clientX clientY
          获取鼠标在网页窗口坐标系中的位置信息
        3.screenX screenY
          获取鼠标在屏幕坐标系中的位置信息
      3.键盘事件对象的属性
        1.onkeydown
          1.which
            获取当前按键的键码
          2.key
            获取按下的字符
        2.onkeypress
          **只有在按下字符时才触发，功能型按键触发不了(ctrl/shift...)
          1.which
            获取当前按键字符的ASC码(区分大小写)
          2.key
            获取按下的字符
          
    示例：
      07_event.html

--------------------- 天天果园项目 ---------------------
1.页面划分:
  开始做页面前，先把布局划分好大块
  导航/banner/main

2.样式设置
  1.从外到内考虑，先整体设置，再进入内部细分设置
    1.默认的文本色、文本大小
    2.超链接的样式
    3.删除某些带有默认样式(边距等等)的标签的默认样式