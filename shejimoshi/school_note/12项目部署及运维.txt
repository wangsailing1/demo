-Web服务
  1. nginx : 高并发处理的好
  2. apache: 稳定

    LAMP : Linux / Apache / Mysql / python(Php)
    LNMP : Linux / Nginx / Mysql / python(Php)
  3. uWSGI
    是web服务器与Web框架之间的通信接口

-项目部署(nginx+uWSGI+Django)
  1.确保django项目能够运行
  2.安装nginx
    1.安装: sudo apt-get install nginx
    2.启动: sudo /etc/init.d/nginx start | restart
  3.安装uWSGI
    1. 安装 : sudo pip3 install uwsgi   
    2. 验证是否安装成功: 
      用uWSGI运行一个django/flask项目,安装成功后系统会自动在项目目录下创建一个同名目录,里面存放着wsgi.py
      uwsgi --http :8000 --chdir /home/xxx项目目录  --module wsgi.py文件相对于项目目录的位置
      如(fruitday项目)
      uwsgi --http :8000 --chdir /home/xxx/fruitday --module fruitday.wsgi
  4.部署在线商城项目
    1.配置uwsgi(配置文件)
      1.在项目目录(manage.py所在路径)中新建uwsgi配置文件
        fruitdayUwsgi.ini
        在该文件写入:
        [uwsgi]
        #指定和nginx通信的端口
        socket=127.0.0.1:8001
        #指定项目路径
        chdir=/home/tarena/test/PythonWeb/django/day02/FruitDay
        #指定wsgi.py路径(没有则写项目的启动文件,如manage.py)
        wsgi-file=FruitDay/wsgi.py
        #进程数（官方推荐４)
        processes=4
        #线程数
        thread=2
        #本项目的uwsgi自身占用端口
        stats=127.0.0.1:8080

    2.配置nginx(配置文件)
      nginx.conf文件
      #收集静态文件的路径
      location /static{
        alias /home/tarena/xxx项目目录/static/   不管有没有这个目录,都写,后期进行收集静态会自动收集进来
      }
      #定义和uwsgi通信端口和通信文件uwsgi_params
      location /{
        include uwsgi_params;
        uwsgi_pass 127.0.0.1:8001 (在配置uwsgi时定义的通信端口)
      }
      5.拷贝uwsgi_params文件到项目目录
    3.收集静态文件
      1.在settings.py中添加路径(static_root)
        STATIC_ROOT = '/home/tarena/project/fruitday/static/'
      3.收集静态文件
        python3 manage.py collectstatic
    4.启动项目
      1.切换到项目目录
      2.利用uwsgi启动项目
        uwsgi --ini fruitdayUwsgi.ini
==================================================================================================      
================================== 王伟超笔记 =====================================================
目标：
  打开浏览器输入:www.tiger.com进入django项目首页
1、概念
  1、Django项目(Web应用)
  2、Web服务
     1、nginx ：高并发处理的好
     2、apache：稳定
        LAMP ：Linux、Apache、MySQL、Python/Php
	LNMP ：Linux、Nginx、MySQL、Python/Php
     3、uwsgi
        是Web服务与Web框架之间简单而通用的接口
2、项目部署(nginx+uwsgi+django)
  1、部署环境准备
    1、确保django项目能够运行
    2、安装nginx(使用apt-get安装)
       1、安装 ：sudo apt-get install nginx
       2、启动 ：sudo /etc/init.d/nginx restart
       3、验证 ：打开浏览器,输入127.0.0.1:80-->出现Welcome to Nginx界面
    3、安装uwsgi(必须使用pip3安装)
       1、安装 ：sudo pip3 install uwsgi
       2、验证 ：uwsgi --http :8888 --chdir /home/tarena/project/fruitday/ --module fruitday.wsgi
3、部署在线商城项目
  1、配置uwsgi(配置文件)
    1、在项目目录(manage.py所在路径)中新建uwsgi配置文件：fruitdayUwsgi.ini
    2、vi fruitdayUwsgi.ini
      [uwsgi]
      # 指定和nginx通信的端口
      socket=127.0.0.1:8001
      # 指定项目路径
      chdir=/home/tarena/project/fruitday
      # 指定wsgi.py路径
      wsgi-file=fruitday/wsgi.py
      # 进程数
      processes=4
      # 线程数
      thread=2
      # 本项目的uwsgi自身占用端口
      stats=127.0.0.1:8080
  2、配置nginx(配置文件)
    1、sudo -i
    2、cd /etc/nginx/sites-enabled
    3、vi projectNginx.conf
	server{
	    # 监听本项目的端口，浏览器输入的端口
	    listen 80;
	    server_name www.lion.com;
	    charset utf-8;

	    # 收集项目静态文件的路径
	    location /static{
		alias /home/tarena/project/fruitday/static;
	    }    

	    # 和uwsgi通信端口和通信文件uwsgi_params
	    location /{
		include uwsgi_params;
		uwsgi_pass 127.0.0.1:8001;
	    }

	}
    4、sudo /etc/init.d/nginx restart
    5、拷贝uwsgi_params文件到项目目录
      cp /etc/nginx/uwsgi_params  /home/tarena/project/fruitday/
    6、关闭nginx默认监听端口80
      1、sudo -i
      2、cd /etc/nginx/sites-enabled/
      3、vi default
         # 把原来默认的80改为800
         listen 800 default_server
	 listen [::]:800 default_server;
    7、sudo /etc/init.d/nginx restart
  3、收集静态文件(配置django项目)
    1、在settings.py中添加路径(STATIC_ROOT)
      STATIC_ROOT = '/home/tarena/project/fruitday/static/'
    2、收集静态文件
      python3 manage.py collectstatic
  4、uwsgi启动项目
    1、切换到项目目录
      cd /home/tarena/project/fruitday
    2、利用uwsgi启动项目
      uwsgi --ini fruitdayUwsgi.ini
  5、添加本地DNS解析
    1、sudo -i
    2、vi /etc/hosts
       ## 添加如下内容：
          127.0.0.1  www.lion.com
    3、重启网络
       /etc/init.d/networking restart
  6、最终验证
    打开浏览器,输入：www.lion.com/user/login
    跳转到登录界面,部署成功
================================== 王伟超笔记(end) ===============================================
==================================================================================================   

-运维概述
  1.什么是运维
    服务器运行维护
  2.名词
    1.IDC(互联网数据中心)
      服务器 / 机柜的维护及租赁
    2.监控软件
      监控服务器状态
        zabbix / nagios / cactti
  3.虚拟化
    通过虚拟化操作系统,虚拟化出多个操作系统来
    常用虚拟化操作系统,如:
      Esxi 6.5
  4.正向代理
    在访问网络资源时,通过代理服务器中转请求
    用户 -> 代理服务器 -> 目标服务器
    1.访问直接访问无法访问到的资源
    2.对目标Web服务器隐藏用户信息
  5.nginx反向代理
    1.流程
      客户端 -> 本公司的代理服务器接收请求 -> 将请求转发给公司内部真正的Web服务器
      响应时也是通过 WEB -> 代理 -> 用户
    2.作用:
      1.保证内网安全,防止真正的WEB服务器被直接攻击
      2.做集群,部署多台WEB服务器,在高并发时,通过代理服务器把请求发送给不同的WEB服务器处理
        以达到负载均衡的效果
        **负载均衡规则:
          轮询 : 将请求逐一轮流发送给后端的服务器
          权重 : 指定轮询几率,将更多的请求发送给配置较高的服务器,提高资源利用率
          ip_hash: 给某客户端IP的请求固定发送给后端某台服务器

-利用Nginx反向代理实现负载均衡
  修改nginx配置文件配置nginx调度器
    upstream  servers{
      server 10.10.10.11;          # 内网真正的web 服务器IP,默认均衡规则为轮询
      server 10.10.10.12 weight=2; # 指定轮询权重为2
      server 10.10.10.13;
      server 10.10.10.14 backup;   # 不参与轮询,但随时就位,一旦有其他服务器出问题,则参与轮询

    } 

    server{
      listen 80;
      server_name 127.0.0.1;
      location / {
        proxy_pass http://servers;  #指定80端口为代理服务器,并指定负载均衡配置 servers
      }
    }         
  
-Linux 常用命令
  1. ifconfig: ip地址和MAC(网卡地址)地址
  2. ping: 测试网络连通性
      ping ip -c 3  # -c 指定ping的次数,不指定会一直拼,除非手动Ctrl+C停止
  3. nslookup: 解析域名对应的IP地址
      nslookup www.baidu.com
  4. sudo /etc/init.d/networking restar  重启网卡
  5. top : Linux下的任务管理器,动态显示CPU以及内存使用率
  6. ps -aux : 显示系统进行(查PID),通常结合管道grep进行筛选查询
      ps -aux | grep 'mysql'


./nginx -s reload