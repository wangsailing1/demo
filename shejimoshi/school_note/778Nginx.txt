-编译与安装
  下载到 /usr/local/src/
  wget 链接地址  
  下载完成后解压
  配置：
    进入解压后的nginx文件夹
      ./configure --prefix=/usr/local/nginx
    
    # 如果缺少pcre库：
      apt-get install libpcre3 libpcre3-dev
  编译：
    # make && make install

-启动Nginx
  cd 到 /usr/local/nginx
  看到如下4个文件
    conf  配置文件 修改该目录下的nginx.conf以设置监听端口，默认主页等
    html  网页文件
    logs  日志文件
    sbin  主要二进制程序
  cd 到 sbin 
    ./nginx  启动Nginx

    *如果80端口被占用，则无法启动
     (有时是自己装了apache，nginx等服务，或者系统自带某些服务占用了,要在root下)
     用 netstat -antp查看是哪个程序在占用(antp是netstat的选项，用netstat -help查看全部选项)
     用 kill -9 PID杀掉对应进程即可

-Nginx 信号量
  *遇到不会用的信号量，上www.nginx.org --> documentation --> command line 查看
    -关闭Nginx服务
    kill -信号量名 PID   # 要操作master对应的进程
    可以采用 kill -信号 'cat logs/nginx.pid'
    信号量名：
      TERM,INT,stop    快速强制关闭quick shutdown(不推荐)
      quit             优雅地关闭进程 graceful shutdown
      HUP              (软重启)重新读取配置文件，重新开始服务，并优雅地关闭旧进程
      USR1             重读日志
                       (使用时要先把旧的access.log改名备份，再新建一个access.log，
                       然后启用该命令，服务器日志才会写到新的access.log中)
      USR2             平滑地升级，用于升级Nginx服务器时启用新服务器
      WINCH            优雅地关闭旧进程，配合USR2使用，完成Nginx升级

-Nginx的其他控制方式
  ./sbin/nginx -h   查看nginx控制选项
  ./sbin/nginx -s   用信号操作nginx
    如 ./sbin/nginx -s stop
       ./sbin/nginx -s quit
       ./sbin/nginx -s reload

       ./sbin/nginx -t  测试当前配置是否正确

-Nginx配置段
  //全局区
  worker_process 1;   指有一个worker进程，但太大无意义，要争夺cpu，一般设置为cpu总核数

  Event{
    //一般是配置Nginx连接的特性
    //如1个work能同时允许多少连接
    worker_connections 1024;  指一个子worker进程最大允许1024个连接，要配合计算机性能来设置
  }

  http{
    //配置http服务器的主要段
    server{
      //虚拟主机配置
    }
  }

-server虚拟主机配置
  server{
    listen 80;              #设置监听端口
    server_name localhost;  #设置监听IP/域名
  
  location / {
      root 路径;        # 表示该虚拟主机的root路径，当路径写相对路径时，相对的是nginx目录
      index index.html; # 表示默认返回的主页
    }
  }

* 修改本机host绑定域名对应的ip
  c:/windows/system32/drivers/etc   176.140.5.113  pxx.com

-日志管理
  1.观察nginx的server段，可以看到如下类似信息
    #access_log  logs/host.access.log main;
  这说明，该server的访问日志文件是logs/host.access.log
  使用的是"main"格式，除了main格式外，我们可以自定义其他格式

  2.什么是main格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
  main格式是定义好的一种日志的格式，并起名为main便于引用
  以上面为例子：
    main类型的日志，记录的remote_addr...http_x_forwarded_for等信息
    $remote_addr      访问者的ip
    $remote_user      用户
    $time_local       访问时间
    $request          请求形式GET/POST
    $status           请求状态200/404/304等
    $body_bytes_sent  发送的字节
    $http_referer     访问前的上一个页面是哪个页面
    $http_user_agent  用户代理(包含访问者的操作系统，所使用的浏览器等信息)
    $http_x_forwarded_for 最后一级代理的ip，如user -> 代理A -> 代理B ->访问 nginx server  该信息就是代理机器B的相关信息

  3.Nginx允许针对不同的server做不同的log

  4.配置日志文件
    server {
        listen       80;
        server_name  localhost;

        location / {
            root   /var/pxx;
            index  index.html index.htm;
        }
        #此处写下配置日志文件的详细指令
        access_log logs/pxx.com.access.log main;
    }
    如果重启nginx服务时提示未知的main格式，那就是conf文件中的main格式
    定义被注释了，去取消注释，再重启
