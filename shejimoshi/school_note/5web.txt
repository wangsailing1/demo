**********************************************************************************************
---------------------------- 2018年12月03日 星期一 晴  -------------------web(day01)------------ 
-老师：赵蒙蒙
-课程：HTML CSS JavaScript

1.web
  1.什么是web
    网页,基于B/S模式的应用程序
    B/S : Browser / Server
    *cookie:
      C/S : Client / Server
  2.组成
    服务器：提供数据支持
    浏览器：向服务器发起请求；解析服务器响应的数据
    通信协议：规范数据传输及打包的方式
             http: Hyper Text Transfer Protocal 
             (超文本传输协议：包含超链接、音视频等，不局限于文本的传输协议)
  3.Web服务器
    1.作用：
      1.提供数据支持
      2.接收请求并响应
      3.提供数据安全功能
    2.服务器产品：
      1.Apache
      2.Tomcat
      3.IIS      即Internet Information Server,出自microsoft
      4.Nginx
    3.开发语言：
      1.Java
      2.PHP
      3.ASP.net
      4.Python(Django,flask...)
  4.浏览器
    1.作用：
        代替用户向服务器发送请求；接收并解析服务器响应，展现给用户
    2.主流产品：
      1.Chrome  - Google产品
      2.Safari  - Apple产品
      3.IE      - MicroSoft产品
      4.Firefox - Mozilla产品
      5.Opera   - Opera产品
      列举以上5种的依据：
        1.市场份额(决定每年排名)
        2.浏览器引擎(内核)不同
            渲染引擎：解析页面，控制渲染结果
            JS引擎：解析脚本
    3.技术：
      前端开发 - 制作网页
      HTML    - 页面结构
      CSS     - 写样式
      JS      - 写逻辑，实现用户交互
      框架     - VUE  Angular  Node.js

-HTML概述
  1.HyperText Markup Language
      超文本   标记    语言         
    作用：
      通过标签的形式书写页面结构并且填充内容
  2.标记
    也叫标签或元素，标记页面结构和内容，配合CSS实现页面整体布局和美化
    以<>为标记
  3.网页在计算机中以.html或者.htm后缀标识
    调试工具：
      浏览器自带的开发者工具 - 右键'检查'或按F12

-HTML基础语法
  1.标签/标记
    1.所有的标签都以<>为标记，区分普通文本
    2.标签分类
      1.双标签：成对出现，有开始，有结束
        语法：
          <标签名>
            标签内容(文本或其他标签)
          </标签名>
      2.单标签：
        只有开始，没有结束，本身代表一定的意义或功能
        语法：
          <标签名>
          或
          <标签名/>
    3.标签嵌套
      在双标签中嵌套添加其他标签
    4.文档结构
      1.网页文件以.html / .htm为后缀
      2.添加双标签<html></html>
      3.在<html>标签中嵌套一对<head></head>,嵌套<body></body>标签
    5.标签属性
      主要用来修饰当前标签的显示效果，或者为元素及网页本身添加额外的补充信息
      语法：
        <开始标签 属性名=属性值>
        e.g. <meta charset="utf-8">
      注意：
        1.标签属性必须写在开始标签里
        2.属性值必须使用引号引起来，单双引号都可以
        3.多组属性之间使用空格隔开
    6.HTML语法规范
      1.标签名不区分大小写，建议统一使用小写
      2.标签名不报错，如果缺少闭合标签，浏览器会自动添加闭合；
      3.标签名书写错误，不报错，只是丧失原有标签的效果及功能
        <meta>  <label>  <table>
      4.注释：
        <!-- 注释内容 -->
        注意：
          注释不能嵌套，也不能写在标签里
          错误示范：
            <body <!-- -->>  #错误
            <!-- <!-- --> --> #错误
      5.代码中适当添加注释与缩进，提高可阅读性

    *cookie:鼠标悬停在开发者工具，可以用'ctrl'+'+'和'ctrl'+'-'调整字体大小
        开发者工具：console 控制台  style  样式  computed 计算样式

-HTML标签介绍
  1.完整的网页结构
    1.<!doctype html>  
      # HTML5提供的文档类型声明，以便浏览器能正确解析网页中的标签，并采用标准方式渲染页面
    2.<html></html>
      表示网页文档的开始和结束
    3.<head></head>
      嵌套在html标签中，表示网页的头部，可以写网页标题，字符集
      外部资源的引入，网页相关介绍，网页选项卡图标等
    4.<body></body>
      表示网页的主体，也是浏览器窗口显示区域，一切有关页面的内容都写在body中
  
  2.网页的头部设置
    1.<head></head>
      可以嵌套其他标签，设置标题，选项卡图标，字符集等信息
        1.标题
          <title>百度一下，你就知道</title>
        2.字符集
          <meta charset="utf-8">
        3.选项卡小图标
          <link rel="shortcut icon" href="图片路径" type="image/x-icon">
          图片后缀.icon  没有icon文件时，用其他格式的图片代替的话，可以修改或者省略type属性
          * 要求路径的斜杠统一用/不要用windows的\
          标签属性：
            rel   设置资源类型
            href  设置资源路径
            type  声明文件类型和后缀

  3.网页主体内容
    1.文本标签
      1.标题标签
        <hn></hn>
        n表示数字：取值1~6，代表总共六级标题，标题中的文本自带加粗效果，
        * 1级到6级字号逐级减小
      2.段落标签
        <p></p>  # paragraph
      3.普通文本标签
        给一段文本中的某一部分额外添加样式或者动态操作使用的标签
        1.行分区标签
          <span></span>
          常与段落或标题结合使用，为内容设置额外样式
        2.<label></label>
          在表单中使用，优化用户操作
        3.格式标签
          加粗：  <b></b>或<strong></strong>  # H5推荐使用更有语义的标签strong
          斜体：  <i></i>
          删除线：<s></s>或<del></del>
          下划线：<u></u>
          上标：  <sup></sup>
          下标：  <sub></sub>
    2.文档中空格与换行
      开发过程中，出于代码整理造成的空格和换行，在浏览器解析时，统统理解为一个空格
      换行标签：<br/>或<br>
      水平线标签：<hr/>
    3.字符实体
      由于HTML是标签语法，所以在某些情况下，特殊字符无法正常显示，如<>,浏览器会认为是标签
        e.g.想要在网页中显示： <day01> 标签语法
      用 &符号名称; 表示特殊字符，如下：
        1. <  :  &lt;
        2. >  :  &gt;
        3.空格 : &nbsp;
        4.版权符号: &copy;
        5.人民币符号: &yen;
    4.块分区标签
        容器标签，划分网页模块
        <div></div>
  4.列表标签
    1.列表是一种结构化标签，按照从上到下依次显示数据
      每一条数据称为一个列表项，不同类型的列表，项目符号不同
    2.分类：
      1.有序列表(ordered list)
        默认用阿拉伯数字标识列表项，从1开始排列
        语法：用<ol>定义为有序列表，在内部嵌套<li>表示列表项
        <ol>
            <li>List Item</li>
            <li>列表项</li>
        </ol>
      2.无序列表(unordered list)
        <ul>
            <li>列表项</li>
        </ul>
        默认以实心圆点标识列表项
        练习：
          新建列表，在body中添加列表，
          无序列表显示四大名著
          有序列表列出编程语言
          见：03_list_tag.html
    3.列表的标签属性
      1.有序列表 -ol
        1.type 
          设置项目符号的类型，默认为阿拉伯数字
          可取(要用引号引起来)：
            1  默认项目符号
            a  按照小写字母排序
            A  按照大写字母排列
            i  按照希腊数字排列
            例：<ol type="a">
        2.start
          设置列表项项目符号从第几个字符开始标识
          取值：
            无单位的数值(表示从第几个字符开始，与符号类型无关)
          例：<ol type="a" start="3">
      2.无序列表 -ul
        1.type:
          设置项目符号的类型
          取值：
            disc    默认值，实心圆点
            circle  空心圆
            square  实心方块
            none    取消项目符号
    4.列表的嵌套
      在列表中嵌套使用另外一个列表，实现多级结构
      语法：
        <ul>
            <li>
                桌面
                <ul>
                    <li>Python-web</li>
                    <li>Django</li>
                </ul>
            </li><ul>
                    <li>Python-web</li>
                    <li>Django</li>
                </ul>
            </li>
            <li>C盘</li>
        </ul>
      * 不同层级元素有父子关系、祖先元素和后代元素关系；同级元素为兄弟关系
      * 使用嵌套列表实现下拉菜单时，使用父子关系嵌套
      练习：
        使用列表显示四大名著，每本名著下显示三个主要人物
    5.标签的层级结构
      1.出现标签嵌套时，外层标签称为父元素，内层标签称为子元素
      2.多级嵌套时，外层标签称为祖先元素，内层所有标签都可以称为后代元素
      3.同级的子元素之间称为兄弟关系
  5.图像与超链接标签
    1.路径(url)
      1.url:统一资源定位符 Uniform Resource Locator
            表示资源文件所在的位置
      2.组成：
        协议  域名  文件目录  文件名
        例:
          http://www.baidu.com/community/010xdaf.jpg
      3.分类
        1.绝对路径
          从根目录开始查找文件
          Windows操作系统上，根目录以盘符为标志
          其他系统根目录 /
        2.相对路径
          从当前所在目录(文件夹)开始查找资源文件
        4.注意：
          1.网络URL中不能出现中文
            文件及文件夹名称中禁止出现中文
          2.URL严格区分大小写
    2.图片标签
      1.在网页中插入一张图片
      2.语法：
        <img>
      3.标签属性：
        1.src:设置图片URL(必填项)
        2.width:设置图片宽度，取像素值
        3.height:设置图片高度，取像素值
            *注：默认情况下，图片会按照原始尺寸显示在网页中；
               宽高属性可以只写一个，另一个会自动等比缩放
        4.title:设置图片标题，鼠标悬停于图片是显示标题文本(提示文本)
        5.alt:设置图片加载失败时的提示文本
    
**********************************************************************************************
---------------------------- 2018年12月04日 星期二 晴  -------------------web(day02)------------

    3.超链接：
      1.作用：实现资源文件的跳转
      2.语法：
        <a href="链接地址"></a>
      3.属性：
        1.href:设置资源文件的地址(必填项)
          如果省略href，超链接文本跟普通文本无差别
          *如果是网页链接，一定要写完整域名，包括网络协议,如：http://www.baidu.com
          *可以写JS的操作
            href="javascript:delete_user();"
        2.target:
          设置目标文件是否在当前窗口打开，默认值为_self,
          表示在当前窗口打开新文件
          可取值：
            _blank    表示在新窗口打开文件
        e.g. 见02_anchor_link.html
    4.锚点链接
      作用：连接到指定文件的指定位置
      语法：
        1.定义锚点
          <a name=""></a>
          锚点名称name自由定义
        2.指定超链接的链接地址
          <a href="页面+锚点名称">链接显示文本</a>
          e.g. <a href="#1">1.人物介绍</a> 
            # '#'号表示当前页面，'#1'表示当前页面的1锚点位置
      例：
        见03_anchor2.html  & 02_anchor_link.html(从该文件跳转到03的5号锚点)
    
    *在超链接中嵌套图片标签，即可实现图片超链接

    5.链接地址为空时的语法：
      1.href=""    #跳转至当前页，包含刷新
      2.href="#"   #跳转到当前页，没有刷新，会在当前URL后加#号
      2.href="javascript:void(0);"  # 不会造成页面刷新，也不会改变URL

-表格标签 (04_table.html)
  1.结构化标签，采用行和列来显示数据
  2.语法：
    1.<table></table>  表格标签
    2.表格中嵌套行标签<tr></tr>  # tr : table row
    3.行中嵌套单元格标签<td></td> # td : table data
    4.单元格标签<th></th>：用法与<td>一致，自带文本加粗和居中效果，常用于表头
  3.标签属性
    1.table属性
      1.border:
        为表格添加边框，取像素值
      2.bgcolor:
        设置表格背景颜色，取颜色的英文单词
      3.align:
        设置表格在父元素中的水平位置，
          取值：left/center/right
        * 该属性也可以用在<h1><p>等标签，用于调整内容的水平位置
      4.width:
        设置表格宽度，取像素值
      5.height
        设置表格高度，取像素值
          注：
            表格的默认尺寸由内容决定，手动设置宽度后，
            会根据单元格的内容多少，自动分配行尺寸和单元格尺寸
      6.cellspacing
        设置表格内边框与边框的距离
      7.cellpadding
        设置单元格内容与单元格边框之间的距离
    2.tr属性
      1.bgcolor:
        设置当前行的背景颜色
      2.align:
        设置当前行内容的水平对齐方式，默认居左
        可取值：left/center/right
      3.valign:
        设置当前行内容的垂直对齐方式，默认垂直居中
        可取值：top/middle/bottom
    3.td属性
      1.bgcolor:
        为单元格设置背景颜色
      2.align
        设置当前单元格中的水平对齐方式
      3.valign
        设置当前单元格中的垂直对齐方式
      4.width/height:
        设置单元格的宽高尺寸
  4.表格结构调整(单元格合并)
    1.合并属性是单元格td独有的属性
    2.属性：
      colspan:  #即collum-span
        跨列合并横向单元格，取值为无单位数字，表示包含当前单元格在内，合并几个单元格
      rowspan:
        跨行纵向合并单元格，取值为无单位数字，表示包含当前单元格在内，合并几个单元格
  5.表格内部结构(行分组标签)
    1.<thead></thead>
      表头行分组
    2.<tfoot></tfoot>
      表尾行分组
    3.<tbody></tbody>
      表格的主体，行分组标签可以省略不写，默认情况下，所有的行都自动加入到tbody中
    见：05_tbody.html

-表单元素
  1.表单用于收集用户信息，并将数据发送给服务器
  2.组成：
    1.form 表单元素
    2.表单控件(输入框，按钮，文件选择...)
  3.语法：
    <form>
        表单控件
    </form>
  4.form标签属性
    1.action : 指定数据的提交地址
    2.method : 指定数据的提交方式
      默认为GET,可取GET/POST
      1.get请求： 
        将数据以参数形式拼接在url后面，明文传输
        例：http://www.baidu.com?name=zhangsan&passwd=123456    # '?'表示附加参数
        * (安全性较低，数据大小有限制，不超过2kb)
      2.POST请求：
        1.数据会被打包，以请求体的方式传输，外界不可见
        2.隐式传输，安全性较高，还可以用加密算法加密之后在传输
        3.没有大小限制(但是过大的数据建议分包传输)
    3.enctype : 编码类型 encode-type
      指定数据发往服务器时的编码类型
        取值：
          1.application/x-www-form-urlencoded(默认的编码方式)
            会将表单中的数据转换成一个字符串(对应GET提交方式),
            附加到URL后面，请求新的URL
          2.multipart/form-data
            专门用来上传特殊的数据类型，如图片、音视频等，通过二进制
            形式将数据发送至服务器，要求必须指定数据以post方式提交
  
  5.表单控件(重点)
    1.提供与用户交互的可视化组件
    2.分类
      1.文本框和密码框
        语法：
          <input type="text">      # 文本框
          <input type="password">  # 密码框
        属性：
          name         定义控件名称(必填),后期数据是以name为键,用户输入为值的键值对方式提交的
          value        设置控件的值，文本框与密码框的值更常见使用JS动态操作
          maxlength    设置输入框最大字符数，取无单位数值
          placeholder  用户输入之前显示的提示文本
          autocomplete 自动提示补全功能，取值：'on'/'off' 默认'on' 
      
      2.单选钮和复选框
        单选：<input type="radio">
        复选：<input type="checkbox">
        属性：
          name          设置控件名称(必填)
          value         设置控件的值(必填项)，代表按钮的值
          checked       设置按钮的默认选中状态，直接使用属性名checked即可，不用写'=""'，代表默认选中该按钮
          * 注意：一组按钮的name属性值必须保持一致
        特殊用法：
          label for="id"
          将文本与按钮绑定在一起，点文本也可以实现选中按钮的功能
          语法：
            <input ... id="1">
            <label for="1">文本</label>
      
      3.隐藏域和文件选择框
        1.隐藏域：
          对用户不可见，某些服务器需要但不需要告知用户的数据，都可以使用隐藏域提交
            <input type="hidden" name="uid" value="001">
        2.文件选择框：
          <input type="file" name="uimg">
          注意：二进制数据传输时，必须使用post提交，必须指定enctype='multipart/form-data'

      4.下拉菜单
        1.语法：
          <select name="address">
              <option value="beijing">文本提示</option>
          </select>

        2.option选项属性
          selected   表示默认选中的选项(缺省时，默认选中第一个option)
        3.获取select选中的option的值
          $('select').pro("value") 或 $('select').val()

      
      5.多行文本域：
        1.语法：
          <textarea name="uinfo"></textarea>
        2.特点：
          支持多行输入，支持用户手动调整尺寸
      
      6.按钮控件
        1.提交按钮:
          当用户点击时，会将表单中的数据按照指定的方式发送给后台
            <input type="submit" value="">
            **属性value用于设置按钮的显示文本,缺省时为"提交"
        2.重置按钮
          将表单中的数据恢复到初始化状态
            <input type="reset" value="显示文本">
            **属性value用于设置按钮的显示文本,缺省时为"重置"
        3.普通按钮
          需要自行绑定JS事件
            <input type="button" value="">
            注：提交和重置按钮自带显示文本，普通按钮没有默认显示文本，
               需要单独指定
        4.<button></button>标签
          也可以表示按钮，标签内容就是按钮显示文本
          注意：
            1.form表单外使用button标签，就是普通按钮
            2.form表单内部使用<button>标签，等价于<input type="submit">具有提交功能

      示例见: 06_form.html        

**********************************************************************************************
---------------------------- 2018年12月05日 星期三 晴  -------------------web(day03)------------
-CSS
  1.什么是CSS
    Cascading Style Sheet 层叠样式表，修饰和美化页面元素，实现
    页面的排版和布局
  2.CSS的使用方式
    1.行内样式/内联样式
      语法：通过标签属性style,为元素设置CSS样式
      注：CSS样式声明是由CSS的属性和值组成的
      例：
        <h1 style="CSS属性名:值;"></h1>
      常用属性：
        1.文本颜色  color             取颜色值(英文单词/RGB/十六进制色)
        2.背景颜色  background-color  取颜色值(英文单词/RGB/十六进制色)
        3.字体大小  font-size         取像素值(默认16px)
      示例：
        见01_CSS.html
    2.文档内嵌
      语法：使用<style></style>标签引入CSS代码，实现样式与结构的分离
      示例：
        <style>
            CSS选择器{属性:值;属性:值;...;}
        </style>
      注：
        1.CSS选择器主要用来匹配页面中的元素，为其设置样式
        2.<style></style>标签可以书写在文档的任意位置，
          书写任意次，一般遵循"样式优先"的原则
    3.外链方式
      1.在HTML文件中使用外部样式表文件，CSS文件以.CSS为后缀，文件中
        直接使用选择器书写样式，在HTML中使用<link>标签引入
      2.外链方式真正实现结构与样式的分离，实现样式的复用
      示例：
        index.css
        其他html文件<head>中，
        用<link rel="stylesheet" href="index.css">引入index.css
  3.样式表特征
    1.层叠性
      不同的样式在同一个元素上共同起作用
    2.继承性
      CSS某些样式可以被子元素或后代元素继承
      例：
        大部分的文本样式
        块元素默认与父元素宽度保持一致
    示例：
      02_css_character.html
  4.样式表的优先级
    1.元素发生样式冲突时，最终选用哪一种样式，是由样式表的
      优先级决定
    2.优先级
        从高到低：
          1.行内样式
          2.文档内嵌/外链
            *(文档内嵌和外链两者同级，同级样式冲突时，按代码书写顺序，后来者居上)
          3.浏览器默认样式优先级最低(user agent style)

-CSS选择器
  1.作用：
    选择页面中哪些元素应用样式
  2.分类：
    1.标签选择器/元素选择器
      1.作用：
        根据指定的标签名匹配文档中所有对应元素
      2.语法：
          标签名{
            属性:值;
            属性:值;
          }
      3.练习：
          创建文件，添加超链接标签，设置超链接文本色为红色，取消下滑线(text_decoration:none;)
          见：03_link_character.html
    2. id选择器
      1.作用：
        根据标签的id属性值选择元素
      2.id属性具有唯一性，不能重复
      3.id属性命名规范：
        自定义，尽量见名知意；
      4.语法：
        id选择器以#开头，后跟id属性值，用于匹配文档中唯一的元素
        例：
          #d1{
            样式声明
          }
          <h1 id="d1"></h1>      
      5.练习
        创建文件，添加div标签，文本内容不限，设置width:200px,height:200px
        背景色自选。见04_id_selector.html
    3.class选择器/类选择器
      1.作用：
        根据标签的class属性值匹配元素
      2.特点：
        类选择器定义的样式可以实现复用，多个元素可以声明为同一类
        一个元素也可以使用多个类属性<h1 class="c1 c2">
      3.语法：
        类选择器以.开头，后跟class属性值
        例：
          .c1{
            样式声明
          }
          <h1 class="c1"></h1>
      4.练习
        创建文件，添加p span div 三个标签，通过类选择器为元素统一设置样式:
        200*200 文本色 背景色 字体大小
        见:05_class_selector.html
    4.特殊用法
      1.标签选择器与类选择器组合使用(标签名在前，类名在后)
        div.c1{
          样式表达式
        }
        ** 表示div标签中，类名为'c1'的元素
        ** 类选择器也可以组合，.c1.c2即表示标签中class同时包含c1和c2的元素
    5.群组选择器
      1.作用：
        为一组元素同一设置样式
      2.语法：
        选择器1,选择器2,选择器3,...{
          样式表达式
        }
      3.练习：
        创建div h1 p标签，通过群组选择器，统一设置字体大小，文本颜色
        见06_group_selector.html
    6.后代选择器：
      1.语法：
        选择器1 选择器2{
          样式表达式
        }
      2.作用：
        在选择器1对应的元素下，查找所有满足选择器2的后代元素
      3.示例：
        07_children_selector.html
    7.子代选择器
      1.语法：
        选择器1>选择器2{
          样式表达式
        }
      2.作用：
        在选择器1对应的元素下，查找所有满足选择器2的直接子元素
    8.伪类选择器
      1.作用：
        针对元素的不同状态设置样式
      2.分类：
        1.超链接伪类选择器
          针对超链接访问前和访问后两种状态分别设置样式
          访问前：
            :link
          访问后：
            :visited
        2.动态伪类选择器
          :hover   表示鼠标滑过/悬停时的状态
          :active  表示鼠标点按不抬起时的状态(激活状态)
          :focus   文本输入框获取焦点时的状态(编辑状态)
          :checked 选择框被选中
        用法：a:link{
            样式表达式
        }
        示例：
          08_fake_class_selector.html
      3.如果需要为超链接添加4种状态的样式，需要固定书写顺序：
        爱恨原则：LoVe/HAte
          :link  :visited  :hover  :active
      4.:not 选择器(过滤器)
          排除某些元素
          ex:
            选择除了类名为.more的span元素
            span:not(.more)     
      5.子元素过滤选择器
        1. :first-child
          匹配作为第一个子元素的元素
          如：'li:first-child' #匹配作为第一个子元素存在的li元素
        2. :last-child
          匹配最后一个子元素
        3. :nth-child(n)
          匹配第n个子元素     
  3.选择器的优先级
      在使用选择器为元素设置样式，发生冲突时，最终选用哪个选择器的样式
    取决于选择器的权重
    权重：
      使用数字来标明选择器的优先级，数字越大，优先级越高

        选择器      权重
      标签选择器     1
      类/伪类选择器  10
      id选择器      100
      行内样式      1000
      注：
        1.组合选择器(后代，子代，伪类)，权重为各个选择器权重之和
        2.群组选择器权重不累加，单独看每个选择器的权重
    示例：
      09_selector_priority.html
    练习：
      创建div id为nav,表示导航栏，div中嵌套若干a标签，表示导航项
      div:宽，高，背景色
      a:  取消下划线，修改默认颜色，鼠标悬停修改a标签文本色和背景色
      见：10_navigation.html

-HTML 标签分类：
  1.块元素 ：
    独占一行，不与其他元素共行，可以设置宽高
      例：body div p h table ul ol form li
    * 注：除table外，所有的块元素默认宽度与父元素保存一致，高度由内容决定
  2.行内元素 ：
    可以与其他元素共行显示，不能手动调整宽高
      例： a span label i b strong u s sub sup     
  3.行内块元素：
    既可以共行显示，又可以设置宽高
      例：img button input(含按钮、输入框等...)
      示例:11_tag_type.html
    注：行内块元素是特殊的行内元素 ，默认垂直对齐为基线对齐(文本底部)
        可以通过属性vertical-align调整行内元素的垂直对齐方式
        取值:top/middle/bottom/baseline(默认值)

-CSS常用属性总结
  color                字体颜色
  background-color     背景颜色
  font-size            字体大小(像素)
  text_decoration      下划线(取none为取消下划线)
  width                元素的宽
  height               元素的高
  vertical-align       垂直对齐方式，取值:top/middle/bottom/baseline(默认值)

**********************************************************************************************
---------------------------- 2018年12月06日 星期四 晴  -------------------web(day04)------------

-尺寸与颜色取值
  1.尺寸单位
    1.px : 浏览器默认单位，表示像素
    2.%  : 百分比单位，如果当前元素自身有尺寸(如图片),百分比单位参照自身尺寸计算，
           **(高版本浏览器有自身尺寸的元素，百分比尺寸也是参照父元素)
           如果当前元素自身没有尺寸，百分比单位参照父元素对应的尺寸计算
    3.em : 默认1em等于字体大小 16px
    3.rem: 参照文档根元素的字体大小 r即root
  2.颜色取值
    1.英文单词
    2.rgb(r,g,b)    采用三原色设置元素，取值0~255
      特殊值：
        rgb(255,0,0)     red
        rgb(0,255,0)     green
        rgb(0,0,255)     blue
        rgb(0,0,0)       black
        rgb(255,255,255) white
    3.rgba(r,g,b,a) 采用带alpha通道的三原色设置，alpha取[0~1]之间,0表示完全透明
    4.十六进制表示颜色：
      1.语法：
        以#开头表示十六进制，可以使用6位字符或三位字符表示颜色，每位字符取值0~9|a~f
          1.六位十六进制:
            每两位为一组，代表一种三原色
          2.三位短十六进制：
            仅是为了书写方便，渲染时浏览器会对每一位进行重复扩充成六位
            如： #f0f --> #ff00ff
          
      2.特殊值：
        rgb(255,0,0)  -->  六位 #ff0000  ff转换成10进制就是255
        rgb(0,255,0)  -->  #00ff00
        rgb(0,0,255)  -->  #0000ff    
        rgb(0,0,0)    -->  #000000  
        rgb(255,255,255) ->#ffffff         

-内容与边框
  1.内容
    1.尺寸属性：
      width/height : 取像素值或%
    2.内容溢出:
      元素内容超过元素自身的尺寸，称为溢出，默认溢出部分可见
      
      溢出内容的处理：
        属性： 
          overflow    
        取值：
          visible    默认值，溢出部分可见
          hidden     隐藏溢出部分
          scroll     生成滚动条，保留所有内容(强制在水平和垂直方向添加滚动条)(滚动条会占用元素尺寸)
          auto       自动在出现溢出的方向上添加可用的滚动条(滚动条会占用元素尺寸)
    见：02_overflow.html      
  2.边框
    1.边框实现
      属性：border
      作用：为元素同一设置上右下左(顺时针)四条边框
      属性：
        border-width    设置边框宽度，取像素值
        border-style    设置边框样式，可取solid(实线)/dashed(虚线)/dotted(点线)/double(双线)
        border-color    设置边框颜色
      注意：
        1.边框宽度默认为3px,border-width可以省略
        2.边框颜色默认为黑色,border-color可以省略
        3.边框样式必须写，没有默认值
      使用：
        可以单独用"border-width:取值"来设置，
        也可以用"border: 3px solid red" 来统一设置，属性值三者没有顺序关系
      见03_border.html
    2.单边框的设置
      1.属性：
        border-top    上边框
        border-right  右边框
        border-bottom 下边框
        border-left    左边框
      2.取值： width style color;
        如 border-top:5px dashed red;
      见04_border2.html
        *(主要看4条边框的交界区,已经三角标的做法)
  3.轮廓线
    类似于边框，常见于输入框获取焦点时的样式
    区别：
      元素添加边框，在html文档中是实际占位的
      轮廓线在文档中不占位置
    属性：
      outline
    取值：
      color style width
      如：outline: red solid 5px; # 取值顺序不要求
    例：
      取消文本输入框自带的轮廓线
        outline:none;
  4.圆角边框
    1.作用：
      调整元素四个角的显示形状，也可以改变元素形状
    2.属性：
      border-radius:
    3.取值：
      1.取像素值 px  以像素为半径倒圆角
      2.取百分比 %   以边的百分比作圆弧(长宽值不一样时，得到的是椭圆弧)
    4.取值情况
      1.像素值：
        只给1个值时，代表四个角均以该值为半径作圆角效果(如：border-radius: 20px)
        给4个值时，分别代表上右下左四个角的圆角半径('上'角即左上角)
        给2个值时，第一个值代表'上''下'两个对角，第二个值代表'左''右'两个对角
        给3个值时，第一个值代表'上'角，第二个值代表'左''右'两个对角，第三值对应'下'角
      2.百分比
        根据百分比参照自身宽高尺寸计算，得到两个值，半长轴和半短轴，作出椭圆弧
        如果元素宽高一致，则得到两个相等的值，作出正圆弧
        取值情况参照像素值：也可以取1~4个值
    5.取值范围：
      不超过元素尺寸
      注意：
        1.取100%等价于50%的效果
        2.单个角取值范围0~100%
        3.多个角同时设置，最大取50%
      见：05_border_radius.html
  5.盒阴影：
    1.属性：box-shadow
    2.取值：
      offsetX  阴影的水平偏移距离，取像素值
      offsetY  阴影的垂直偏移距离，取像素值
      blur     阴影的模糊程度，取像素值，越大越模糊
      spread   选填，阴影的延伸距离，取像素值
      color    阴影颜色
    3.浏览器&元素坐标系
      浏览器和元素自身都具备坐标系，以左上角为原点，向右为X正向，向下为Y轴正向
    
    用法示例： box-shadow: 5px 5px 20px -2px red;
    见06_box_shadow.html

-盒模型
  1.一切元素皆为框
    盒模型组成：
      元素尺寸(width/height)
      内边距(padding)
      外框(border)
      外边距(margin)
    作用：
      各个属性互相叠加，影响元素在文档中的最终占据尺寸
    计算：
      默认情况下，元素最终占据尺寸为
        最终宽度 = width + 左右内边距 + 左右边框宽度 + 左右外边距
        最终高度 = height + 上下内边距 + 上下边框宽度 + 上下外边距
  2.外边距(margin)
    1.作用：设置元素与元素之间的距离
    2.属性：margin
    3.取值：像素值/百分比
        1.margin : v1;          设置上右下左四个方向的外边距
        2.margin : v1 v2;       设置上下外边距为v1，左右的外边距为v2  
        3.margin : v1 v2 v3;    上v1,左右边距为v2,下v3
        4.margin : v1 v2 v3 v4; 分别设置上右下左外边距
    4.特殊取值：
      1.margin:0;      取消默认外边距
      2.margin:0 auto; 设置左右外边距，实现元素居中效果；auto只对左右边距有效
      3.负值            用于微调，如填补空白
      见07_margin.html
    5.单方向外边距的设置
      1.属性
        margin-top
        margin-right
        margin-bottom
        margin-left
      2.取值：
        像素值
    6.外边距合并
      1.垂直方向
        1.子元素(块元素)
          添加的margin-top,作用于父元素上
        解决办法：
          1.父元素添加顶部边框
          2.父元素添加顶部内边距0.1px  padding-top:0.1px
          3.父元素添加overflow:hidden
        2.垂直方向两个块元素同时添加上下外边距时，取较大值
          (也可理解为，边距即是元素与元素之间的距离，因此最终距离是较大的那个)
      2.水平方向
        行内元素默认情况下，对盒模型的属性部分支持，水平方向的外边距会叠加显示
    7.具有默认外边距的元素
      body h1~h6 p ul ol
      取消默认外边距：margin:0px;
  3.内边距(padding)
    1.元素内容与边框之间的距离
    2.语法：
      1.padding: v1;          设置上右下左四个方向的内边距
      2.padding: v1,v2;       上下内边距v1,左右v2;
      3.padding: v1,v2,v3;    上v1,左右v2,下v3;
      4.padding: v1,v2,v3,v4  分别设置上右下左四个方向内边距
    见09_padding.html
    3.单方向内边距的设置
      1.属性：
        padding-top
        padding-right
        padding-bottom
        padding-left
    4.具有默认内边距的元素
      ul ol 表单控件 button
  4.box-sizing
    1.作用：指定盒模型的计算方式
    2.取值：
      1.content-box    默认值
        大部分元素遵照content-box计算在文档中的实际尺寸，计算方法：
          盒模型各项属性值依次累加
      2.border-box
        表单控件默认都是按照border-box计算最终尺寸的，计算方法：
          CSS属性width/height定义的尺寸，是border-box的尺寸，包含
          边框，内边距，内容
          最终占据尺寸：
            width/height + margin
    用法: box-sizing: border-box
      示例见:10_box_sizing.html
  *行内元素对盒模型属性部分支持，只支持左右内外边距，上下外边距不支持，上下内边距显示效果有
    问题(上下扩充，会挡住其他元素)

**********************************************************************************************
---------------------------- 2018年12月07日 星期五 晴  -------------------web(day05)------------

-背景相关的属性
  1.背景颜色
    background-color    取颜色值
    注意：
      1.所有元素默认背景颜色为透明rgba(0,0,0,0),窗口显示的白色是浏览器
        自动渲染的浏览器背景；(表单元素除外，如按钮等，有自带背景)
      2.背景颜色从边框外边位置开始渲染，包含内边距和元素内容区域；
  2.背景图片
    1.背景图片设置
      属性：background-image
      取值：url("路径")
        如：background-image:url('wxy.jpeg')
      注意：
        1.路径加不加引号都可以，但是如果路径中包含空格或中文，必须加引号
          *支持gif
        2.如果图片尺寸小于元素尺寸，浏览器会自动将图片重复平铺，填满元素
        3.图片尺寸大于元素尺寸，图片按照原始尺寸显示，超出元素部分不可见
    2.背景图片重复方式
      默认水平和垂直两个方向重复平铺，填满元素
      属性：background-repeat
      取值：
        1.repeat    默认值
        2.repeat-x  沿水平方向重复平铺
        3.repeat-y  沿垂直方向重复平铺
        4.no-repeat 不进行重复平铺，仅按原尺寸显示一张图
    3.背景图片的尺寸设置
      属性：background-size
      取值：
        1.width height(px)
        2.% %  (百分比单位参照元素尺寸计算，并调整背景图片大小)
          注意：
            如果只给一个值，默认为宽度值，高度值会等比缩放
        3.cover    图片等比拉伸至完全覆盖元素，超出元素部分裁剪不可见
        4.contain  图片等比拉伸，直至有一边到达元素边界
    4.背景图片的位置设置
      默认情况下，元素的内容或者背景图片都是从左上角显示的
      属性：background-position
        1. x y    像素值，分别表示水平和垂直偏移距离，超出部分不显示
        2. % %    参照元素的宽高尺寸，计算偏移距离
                  *(事实上不能严格地称为偏移距离,50%对应center,100%对应right/bottom)
          特殊值：
            1.100% 100%
              显示在右下角
            2.50% 50%
              显示在中间
        3.方位值
          x: left/center/right
          y: top/center/bottom
          如果只设置了一个方向的值，另外一个方向默认为center
      *精灵图技术：
        为了减少网络请求，节省资源，通常会将一组按钮不同状态下的小图片拼在一张图片上，
        通过一次网络请求得到，页面中借助background-position调整图片显示位置，以显示
        不同效果的小图片
      见01_background.html
  3.背景属性简写
    属性：background
    按顺序取值: color url() repeat position;
    注意：
      1.使用简写属性统一设置背景相关的样式是，遵照以上顺序书写
      2.属性值根据需要添加，没有必填项
      3.background-size是CSS3提供的属性，根据需要单独设置

-文本相关的属性
  1.字体样式
    1.设置字体大小
      属性: font-size
      取值：像素值/em
    2.指定字体名称
      属性：font-family
      取值：字体名称，多个名称直接使用逗号隔开
            如果字体名称中出现中文或者空格，必须加引号
      示例：
        font-family: Arial;
        font-family: Arial,"黑体","Microsoft YaHei";
    3.指定字体粗细
      属性：font-weight
      取值：
        normal  (默认值)
        bold     加粗
        数值     使用100~900之间的整百数值表示粗细程度
                 400 --> normal
                 700 --> bold
    4.指定字体样式(是否斜体或倾斜)
      属性：font-style
      取值：
        1.normal  (默认正常显示)
        2.italic  (斜体显示)
        3.oblique (字体倾斜)
      注意：
        oblique  默认情况下显示效果与italic一致，没有区别
          ** 一般oblique可以用作italic的备用样式，当有些字体不支持italic，可以用
             oblique强制倾斜，并可以设置角度

    5.字体属性简写
      属性：font
      按顺序取值：style weight size family;
      注意：
        1.严格按照顺序书写
        2.size family是必填项，不能省略；
    见02_font.html
  2.文本样式
    1.文本颜色
      属性：color
      取值：颜色值
    2.文本的水平对齐方式
      属性：text-align
      取值：left(默认)/center/right/justify(两端对齐)
    * 两端对齐，浏览器会自动调整每一行字符之间的间距
  3.文本的垂直显示位置
    属性：line-height
    取值：像素值
    使用：
      1.一行文本的垂直居中
        (文本在当前行中始终是居中的)，因此要设置一行文本的垂直居中
        设置该行的行高与高度保持一致即可
      2.如果行高小于高度，文本会上移
      3.如果行高大于高度，文本显示在元素靠下的位置，可以通过行高对
        文本位置微调
    特殊取值：
      line-height可以取无单位的数值，表示字体大小的倍数，以此计算
      行高
  4.文本装饰线
    属性；text-decoration
    取值：
      1.underline     下划线
      2.overline      上划线
      3.line-through  删除线
      4.none          取消装饰线
  5.标签嵌套
    1.块元素中可以嵌套一切标签
      注意：
        1.标题中只能嵌套段落或者行内元素(*标题不能套标题，渲染时会自动变成平级)
        2.段落中只能嵌套行内元素
    2.行内元素中只能嵌套行内元素

  见03_text_style.html

-表格相关的属性
  1.表格是块元素，CSS属性可以通用
  2.table标签独有的CSS属性
    1.边框合并
      属性：border-collapse
      取值：
        1.separate   (默认值，表格边框与单元格边框是分离状态)
        2.collapse   (边框合并)
    2.边框之间的距离
      *包括了单元格与单元格的距离，和单元格与表格边框的距离
      属性：border-spacing
      取值: h v;
        两个值分别设置水平方向和垂直方向边框之间的距离，取像素值
      注意：
        只能在边框分离的状态下使用
    3.表格尺寸
      1.table设置宽高，单元格会自动分配空间
      2.table固定宽高，指定某个单元格的尺寸，会影响单元格所在的的行高和列宽
      3.如果需要统一设置所有单元格的尺寸，table就不要再设置宽高，让table尺寸由
        内容自动变化。一旦设置了table宽高，单元格的大小就不生效
  见04_table.html

-CSS过渡效果
  1.不同状态下的元素样式的改变，不再是瞬时完成，而是增加平滑过渡的效果
  2.属性：
    1.指定过渡
      transition-duration
      取值：以秒(s)或者毫秒(ms)为单位的数值
      transition-duration:3s;
      *通常写在默认状态，不写在伪类
        写在div{}里， 不写在div:hover{}如果写在伪类里，鼠标移开时会瞬时恢复
        写在div里，鼠标移开时，会平滑恢复
    2.指定过渡属性
      transition-property
      取值：
        1.all(代表所有css属性)
        2.CSS属性名1,属性名2,属性名3;
      如：transition-property:width,background;
    3.指定过渡效果的速度变化
      transition-timing-function
      取值：
        linear                规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。 
        ease                  规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。 
        ease-in               规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。 
        ease-out              规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。 
        ease-in-out           规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。 
        cubic-bezier(n,n,n,n) 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。 
    4.指定过渡效果延迟执行
      transition-delay
      取值：时间值(s/ms)
    5.属性简写
      语法：
        transition: property duration timing-function delay;
      注意：
        duration是必填项，不写过渡时长，就没有过渡效果
      练习：
        1.块元素200*200，背景颜色自定义
        2.鼠标悬停时，尺寸改为300*300，改成圆形，背景颜色自定义
        3.所有样式改变，添加平滑过渡
      见06_transition.html

-布局方式
  1.设置元素在文档中的排列和显示位置
  2.分类：
    1.普通流布局/文档流布局/静态布局
      特点:
        按照元素类型和属性顺序，从上至下，从左到右依次显示元素。是默认的布局方式
    2.浮动布局
      属性:float
      取值：left/right/none(默认)
      特点：
        1.元素设置浮动，会停靠在body或其他浮动元素的边缘，left/right指定元素的浮动方向
        2.浮动元素会脱离文档流，在文档中不再占位，后面元素会向前占位(表单元素除外，表单元素会认为是内容，会环绕浮动元素显示,div也是环绕)
        3.元素一旦脱离文档流，尺寸就由内容多少决定(不再参考父元素),可以手动调整宽高
          (只有脱流元素才可以设置,position:relative没有脱流，仍然占位，因此行内元素还是不能设置尺寸)
        4.浮动会造成文字环绕效果，浮动元素不占位，悬浮在文档上方，遮挡正常元素,正常元素
          中的内容会围绕在浮动元素周围显示
        问题:浮动元素不占位，导致父元素高度为0，影响布局，影响父元素背景图，背景色的显示
    见07_float.html

作业：
  1.自定义导航栏，内容样式不限，要求导航项均匀分布，导航项之间有间隔(见day06/02_float_nav.html)
  2.写登录页面(见project/login.html)
  3.对照表格练习图片做表格练习(见08_table_exercise.html)

**********************************************************************************************
---------------------------- 2018年12月10日 星期一 晴  -------------------web(day06)------------  
-布局方式
  1.文档流布局
    特点:根据标签类型和书写顺序从上到下，从左到右依次排列显示
  2.浮动布局
    属性：float
    取值：left/right/none
    特点：
      1.元素设置浮动，会从它在文档中的原始位置，脱离文档流，向左或向右移动
        停靠在其他元素的边缘，多个浮动元素会按照顺序依次停靠
      2.浮动元素在文档中不占位,所有元素设置浮动之后，都可以设置宽高尺寸
        (只有脱流元素才可以设置,position:relative没有脱流，仍然占位，因此行内元素还是不能设置尺寸)
        ，并且水平方向没有缝隙
    示例：
      01_float.html
    问题：
      子元素全部浮动不占位，当父元素没有设置高度时，会导致父元素高度为0，自身的背景
      色背景图无从显示，文档后面的元素会自动向前占位。
      解决方法：
        1.给父元素固定高度(导航栏中常用)
        2.给父元素添加overflow:hidden;
        3.清除浮动带来的影响
          清除方法：
            1.在父元素末尾添加空块级元素
            2.清除该标签的浮动影响，之后的元素就可以继续正常排版
              clear:both
          属性：clear
          取值：left/right/both
          作用：使文档中正常元素不受前面浮动元素的影响*,*(只对float有效，对position无效)
          见03_clear.html
  3.定位布局
    属性：position
    取值：static(默认)/relative/absolute/fixed
    已定位元素：
      只有position属性被设置为relative/absolute/fixed的元素才能被称为
      已定位元素
    分类：
      1.relative 相对定位
        特点：元素设置相对定位，会参照它在文档中的原始位置进行偏移
        偏移属性：
          top  : 取像素值，(按y轴方向)正值，元素下移，负值元素上移
          left : 取像素值，(按x轴方向)正值，元素右移，负值元素左移
          right : 与left取值情况相反
          bottom : 与top取值情况相反
      示例：
        position:relative;
        top: 200px;
      见04_relative.html
      注意：
        元素以相对定位偏移走之后，元素的初始占位并不会取消，其他元素不能往前占位

      2.absolute 绝对定位
        特点：
          1.绝对定位的元素会参照一个离他最近的已经定位的祖先元素进行偏移；
            如果没有已定位的祖先元素，则参照浏览器窗口的左上角进行偏移。
          2.绝对定位的元素会脱离文档流，所有脱流元素在文档中都不占位
        使用：
          1.偏移属性，根据元素参照物的边缘进行偏移
          2.遵照父相子绝原则：父元素相对定位，子元素通过绝对定位调整显示位置
        见05_absolute.html

      3.堆叠次序调整(层叠)
        属性：z-index
        取值：无单位的数值，数值越大越靠上，默认值为0
        使用：
          1.只有已定位元素才可以使用该属性
          2.兄弟元素之间，通过z-index调整堆叠次序，数值越大越靠上,数值一样时，后来者居上
          3.父子关系不受z-index影响，永远是子元素在上
        见06_z_index.html
      
      4.fixed 固定定位
        特点：
          固定定位的元素，永远参照浏览器的窗口进行偏移，固定显示在窗口的某个位置，
          不会跟随页面滚动而消失，永远固定显示在窗口固定位置。
        见：07_fixed.html

-元素显示方式
  1.display(类型转换)
    取值：inline/block/inline-block/none
    作用:调整元素方式的显示方式
      inline  行内元素
      inline-block 行内块元素
      block  块元素
      none   隐藏元素不显示，隐藏元素不占位
    见
      08_display.html
  2.visibility
    取值：
      visible(默认)/hidden
    作用：
      控制元素显示与隐藏，元素隐藏时仍然在文档中占位
  3.opacity
    取值 ：0(透明)~1(不透明)
    特点：
      1.使用opacity设置元素半透明，表示元素内部索引的内容都
        呈现半透明效果
      2.父子元素都设置opacity半透明，最终的半透明效果是两个元素的opacity值相乘
  4.光标显示
    属性：cursor
    作用：调整鼠标在当前元素上的显示形状
    取值：
      1.default 默认值
      2.pointer 手指形状
      3.text    文本

-列表样式
  列表：
    自带上下margin,padding-left,带有项目符号
  属性：
    1.list-style-type:
      设置列表项目符号(取值查看手册CSS列表)
    2.list-style-image:
      自定义项目符号
      取值：url()
    3.list-style-position
      取值：outside(默认)/inside
      作用：设置项目符号的显示位置，是否在内容框中显示，默认在padding区域
  简写属性：
    list-style: none;
    取消列表的项目符号
  见10_list-style.html

-转换属性
  1.元素的缩放，平移和旋转都称为转换操作：
  2.语法：
    属性：transform
    取值：转换函数1 转换函数2 ...;
  3.使用：
    1.转换原点(基准点)
      默认以元素的中心点作为转换原点
      属性：transform-origin
      取值：x y;
        1.取像素值
            在元素自身左上角为原点构建的坐标系中选取点的坐标
        2.取百分比
        3.取方位值
          left/center/right
          top/center/bottom
    2.转换函数
      1.平移变换
        函数：translate(h,v)
        取值：
          可以分别设置元素沿x轴和y轴移动的距离
          *仅取一个值时，表示沿水平方向平移
        其他：
          translateX(value) : 沿X轴平移
          translateY(value) : 沿Y轴平移
        示例：
          transform: translate(100px,100px)
        见：
          11_translate.html
      2.缩放变换
        改变元素在页面中的大小(以元素的转换原点缩放)
        函数：
          scale(value)
        取值情况：
          1.value为无单位的数值，表示缩放比
          2.value取值范围:
            0<value<1  缩小
            value = 1  (默认)
            value > 1  放大
            *value < 1 数值仍然是缩放比，负号则会使元素翻转
        见12_scale.html
        其他：
          scaleX(value):沿X轴缩放
          scaleY(value):沿Y轴缩放
      3.旋转变换
        将元素旋转一定角度
        函数：rotate(value)
        取值：角度,以deg为单位的数值，正值表示顺时针旋转
        -------------------
        3D旋转
        函数：
          rotateX(value)  沿X轴旋转
          rotateY(value)  沿Y轴旋转 

        见13_rotate.html
      4.转换函数的组合使用
        1.转换原点会影响最终结果
        2.转换函数的先后顺序，也会影响结果,旋转操作会连带坐标轴一起旋转


小图标网站
  www.iconfont.cn